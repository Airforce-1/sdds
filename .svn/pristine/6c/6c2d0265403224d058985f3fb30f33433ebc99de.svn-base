package com.jeecms.cms.action.admin.main;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jeecms.cms.entity.assist.CmsGuestbookCtg;
import com.jeecms.cms.entity.main.Channel;
import com.jeecms.cms.manager.assist.CmsGuestbookCtgMng;
import com.jeecms.cms.manager.main.ChannelMng;
import com.jeecms.common.page.Pagination;
import com.jeecms.common.web.CookieUtils;
import com.jeecms.common.web.ResponseUtils;
import com.jeecms.core.entity.CmsDepartment;
import com.jeecms.core.entity.CmsSite;
import com.jeecms.core.entity.CmsUser;
import com.jeecms.core.manager.CmsDepartmentMng;
import com.jeecms.core.manager.CmsLogMng;
import com.jeecms.core.manager.CmsSiteMng;
import com.jeecms.core.manager.CmsUserMng;
import com.jeecms.core.web.WebErrors;
import com.jeecms.core.web.util.CmsUtils;
import com.risen.entity.CoreDictionary;
import com.risen.entity.RisenChangeremindrecord;
import com.risen.service.ICoreDictionaryService;

import static com.jeecms.common.page.SimplePage.cpn;
@Controller
public class CmsDepartmentAct {
	private static final Logger log = LoggerFactory
			.getLogger(CmsDepartmentAct.class);

	@RequiresPermissions("department:depart_main")
	@RequestMapping("/department/depart_main.do")
	public String departMain(ModelMap model) {
		return "department/depart_main";
	}
	
	@RequiresPermissions("department:v_left")
	@RequestMapping("/department/v_left.do")
	public String left() {
		return "department/left";
	}

	@RequiresPermissions("department:v_list")
	@RequestMapping("/department/v_list.do")
	public String list(Integer  root, HttpServletRequest request,ModelMap model) {
		List<CmsDepartment>list=new ArrayList<CmsDepartment>();
		CmsUser user = CmsUtils.getUser(request);
		boolean isnullorg = manager.findlistByPid(user.getDepartment().getId());
		if(isnullorg){
			list.add(manager.findById(user.getDepartment().getId()));
		}else {
			list=manager.getList(user.getDepartment().getId(), false);
			if(root!=null){
				list=manager.getList(root, false);
			}
		}
		model.addAttribute("list", list);
		model.addAttribute("parentId", root);
		return "department/list";
	}
	
	@RequiresPermissions("department:v_add")
	@RequestMapping("/department/v_add.do")
	public String add(Integer parentId,ModelMap model, HttpServletRequest request) {
		model.addAttribute("site",CmsUtils.getSite(request));
		List<CmsSite> siteList = cmsSiteMng.getList();
		List<CmsGuestbookCtg>ctgList=guestBookCtgMng.getList(CmsUtils.getSiteId(request));
		CmsDepartment parent=null;
		if(parentId!=null){
			parent=manager.findById(parentId);
		}
		List<CmsDepartment> cityList = manager.getCorecdKeyList("地市");
		List<CmsDepartment> orgtypeList = manager.getCorecdKeyList("组织类型");
		List<CmsDepartment> orgLevelList = manager.getCorecdKeyList("组织等级");
		model.addAttribute("siteList", siteList);
		model.addAttribute("ctgList", ctgList);
		model.addAttribute("ctgList", ctgList);
		model.addAttribute("parent", parent);
		model.addAttribute("cityList", cityList);
		model.addAttribute("orgtypeList", orgtypeList);
		model.addAttribute("orgLevelList", orgLevelList);
		model.addAttribute("pri",manager.getMaxPriority(parentId));
		
		return "department/add";
	}

	@RequiresPermissions("department:o_save")
	@RequestMapping("/department/o_save.do")
	public String save(CmsDepartment bean, Integer pid,Integer[] channelIds,
			Integer[] controlChannelIds,Integer[] ctgIds,
			HttpServletRequest request,ModelMap model) {
		WebErrors errors = validateSave(bean, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		if(pid!=null&&!pid.equals(0)){
			CmsDepartment parent=manager.findById(pid);
			bean.setParent(parent);
		}
		bean = manager.save(bean,channelIds,controlChannelIds,ctgIds);
		log.info("save CmsDepartment id={}", bean.getId());
		cmsLogMng.operating(request, "cmsdepartment.log.save", "id="
				+ bean.getId() + ";name=" + bean.getName());
		return list(pid, request, model);
	}
	@RequiresPermissions("department:v_logincoedvft")
	@RequestMapping("/department/v_logincoedvft.do")
	public void logincodevft(long code, ModelMap model, HttpServletRequest request,HttpServletResponse response){
		boolean msg = userMng.loginCodeExist(code);
		try {
		if(msg){
				response.getWriter().write("true");
			}else{
				response.getWriter().write("false");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	@RequiresPermissions("department:v_check_name")
	@RequestMapping("/department/v_check_name.do")
	public String checkName(String name, HttpServletRequest request,
			HttpServletResponse response) {
		if (StringUtils.isBlank(name) || manager.nameExist(name)) {
			ResponseUtils.renderJson(response, "false");
		} else {
			ResponseUtils.renderJson(response, "true");
		}
		return null;
	}

	@RequiresPermissions("department:v_edit")
	@RequestMapping("/department/v_edit.do")
	public String edit(Integer id,Integer parentId, Integer pageNo,
			HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		Long startLong=System.currentTimeMillis();
		CmsDepartment department= manager.findById(id);
		System.out.println("===========查询department耗时============："+(System.currentTimeMillis()-startLong)/1000);
		List<CmsSite> siteList = cmsSiteMng.getList();
		System.out.println("===========查询siteList耗时============："+(System.currentTimeMillis()-startLong)/1000);
		List<CmsGuestbookCtg>ctgList=guestBookCtgMng.getList(CmsUtils.getSiteId(request));
		System.out.println("===========查询ctgList耗时============："+(System.currentTimeMillis()-startLong)/1000);
		Map<String, Set<Integer>>departChannelIds=new HashMap<String, Set<Integer>>();
		for(CmsSite site:siteList){
			departChannelIds.put(site.getId().toString(), department.getChannelIds(site.getId()));
		}
		List<CmsDepartment>topDeparts=manager.getList(null, false);
		System.out.println("===========查询topDeparts耗时============："+(System.currentTimeMillis()-startLong)/1000);
		List<CmsDepartment> cityList = manager.getCorecdKeyList("地市");
		System.out.println("===========查询cityList耗时============："+(System.currentTimeMillis()-startLong)/1000);
		List<CmsDepartment> orgtypeList = manager.getCorecdKeyList("组织类型");
		System.out.println("===========查询orgtypeList耗时============："+(System.currentTimeMillis()-startLong)/1000);
		List<CmsDepartment> orgLevelList = manager.getCorecdKeyList("组织等级");
		System.out.println("===========查询orgLevelList耗时============："+(System.currentTimeMillis()-startLong)/1000);
		model.addAttribute("department", department);
		model.addAttribute("siteList", siteList);
		model.addAttribute("ctgList", ctgList);
		model.addAttribute("departments",topDeparts);
		System.out.println("===========查询CmsDepartment耗时============："+(System.currentTimeMillis()-startLong)/1000);
		model.addAttribute("site",CmsUtils.getSite(request));
		model.addAttribute("departChannelIds", departChannelIds);
		model.addAttribute("ctgIds", department.getGuestBookCtgIds());
		model.addAttribute("parentId", parentId);
		model.addAttribute("cityList", cityList);
		model.addAttribute("orgtypeList", orgtypeList);
		model.addAttribute("orgLevelList", orgLevelList);
		model.addAttribute("pri",manager.getMaxPriority(parentId));
		return "department/edit";
	}

	@RequiresPermissions("department:o_update")
	@RequestMapping("/department/o_update.do")
	public String update(CmsDepartment bean, Integer pid,Integer[] channelIds,
			Integer[] controlChannelIds,Integer[] ctgIds,
			HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateUpdate(bean.getId(), request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		if(pid!=null){
			if(pid.equals(0)){
				bean.setParent(null);
			}else{
				CmsDepartment parent=manager.findById(pid);
				bean.setParent(parent);
			}
		}
		bean = manager.update(bean,channelIds,controlChannelIds,ctgIds);
		log.info("update CmsDepartment id={}.", bean.getId());
		cmsLogMng.operating(request, "cmsdepartment.log.update", "id="
				+ bean.getId() + ";name=" + bean.getName());
		return list(pid,request, model);
	}

	@RequiresPermissions("department:o_priority")
	@RequestMapping("/department/o_priority.do")
	public String priority(Integer[] wids, Integer[] priority, Integer parentId, HttpServletRequest request, ModelMap model) {
		WebErrors errors = validatePriority(wids, priority, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		manager.updatePriority(wids, priority);
		log.info("update department priority");
		return list(parentId, request, model);
	}

	@RequiresPermissions("department:o_delete")
	@RequestMapping("/department/o_delete.do")
	public String delete(Integer[] ids, Integer parentId,HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateDelete(ids, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		CmsDepartment[] beans = manager.deleteByIds(ids);
		for (CmsDepartment bean : beans) {
			log.info("delete department id={}", bean.getId());
			cmsLogMng.operating(request, "cmsdepartment.log.delete", "id="
					+ bean.getId() + ";name=" + bean.getName());
		}
		return list(parentId, request, model);
	}
	
	@RequiresPermissions("department:v_tree")
	@RequestMapping(value = "/department/v_tree.do")
	public String selectParent(String root, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		log.debug("tree path={}", root);
		boolean isRoot;
		// jquery treeview的根请求为root=source
		if (StringUtils.isBlank(root) || "source".equals(root)) {
			isRoot = true;
		} else {
			isRoot = false;
		}
		model.addAttribute("isRoot", isRoot);
		List<CmsDepartment> departList;
		if(isRoot){
			departList= manager.getList(null,false);
		}else{
			departList = manager.getList(Integer.parseInt(root),false);
		}
		model.addAttribute("list", departList);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "department/tree";
	}
	
	@RequiresPermissions("department:v_tree")
	@RequestMapping(value = "/department/v_childtree.do")
	public String getChild(String root, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		log.debug("tree path={}", root);
		boolean isRoot;
		// jquery treeview的根请求为root=source
		if (StringUtils.isBlank(root) || "source".equals(root)) {
			isRoot = true;
		} else {
			isRoot = false;
		}
		model.addAttribute("isRoot", isRoot);
		List<CmsDepartment> departList;
		CmsUser user=CmsUtils.getUser(request);
			departList= manager.getList(user.getDepartment().getId(),false);
		model.addAttribute("dept", user.getDepartment());
		model.addAttribute("list", departList);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "partybuild/tree";
	}
	
	@RequiresPermissions("department:v_tree")
	@RequestMapping(value = "/department/s_tree.do")
	public String getStree(String root, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		log.debug("tree path={}", root);
		boolean isRoot;
		// jquery treeview的根请求为root=source
		if (StringUtils.isBlank(root) || "source".equals(root)) {
			isRoot = true;
		} else {
			isRoot = false;
		}
		model.addAttribute("isRoot", isRoot);
		List<CmsDepartment> departList;
		CmsUser user=CmsUtils.getUser(request);
			departList= manager.getList(user.getDepartment().getId(),false);
		model.addAttribute("dept", user.getDepartment());
		model.addAttribute("list", departList);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "partybuild/shareContent/tree";
	}
	
	@RequiresPermissions("department:v_channels_list")
	@RequestMapping(value = "/department/v_channels_list.do")
	public String channelsAdd(Integer siteId, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		return channelsListJson(siteId,request, response, model);
	}
	
	@RequiresPermissions("department:v_site_list")
	@RequestMapping(value = "/department/v_site_list.do")
	public String siteAddTree(HttpServletRequest request,HttpServletResponse response, ModelMap model) {
		List<CmsSite> siteList= cmsSiteMng.getTopList();
		model.addAttribute("siteList", siteList);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "department/sites";
	}
	
	@RequiresPermissions("department:v_control_site_list")
	@RequestMapping(value = "/department/v_control_site_list.do")
	public String siteControlTree(HttpServletRequest request,HttpServletResponse response, ModelMap model) {
		List<CmsSite> siteList= cmsSiteMng.getTopList();
		model.addAttribute("siteList", siteList);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "department/control_sites";
	}
	
	@RequiresPermissions("department:v_list_members")
	@RequestMapping("/department/v_list_members.do")
	public String list_members(Integer departId,Integer root, Integer pageNo, HttpServletRequest request,
			ModelMap model) {
		Pagination pagination = userMng.getAdminsByDepartId(departId,cpn(pageNo), CookieUtils.getPageSize(request));
		model.addAttribute("pagination", pagination);
		model.addAttribute("departId", departId);
		model.addAttribute("root", root);
		return "department/members";
	}
	

	private String channelsListJson(Integer siteId, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		List<Channel> channelList = channelMng.getTopList(siteId, false);
		model.addAttribute("channelList", channelList);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "department/channels";
	}
	/**
	 * 加载树（点击显示对应组织下党员）
	 * @param root
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/member/tree.do")
	public String departTreeShowParty(String root,String sddscpUsertype, HttpServletRequest request,
			HttpServletResponse response, ModelMap model){
		log.debug("tree path={}", root);
		boolean isRoot;
		// jquery treeview的根请求为root=source
		if (StringUtils.isBlank(root) || "source".equals(root)) {
			isRoot = true;
		} else {
			isRoot = false;
		}
		model.addAttribute("isRoot", isRoot);
		List<CmsDepartment> departList;
		CmsUser self=CmsUtils.getUser(request);
		if("admin".equals(self.getUsername())){
			if(isRoot){
				departList= manager.getList(null,false);
			}else{
				departList = manager.getList(Integer.parseInt(root),false);
			}
		}else {
			if(isRoot){
				departList= manager.getList(self.getDepartment().getId(),false);
			}else{
				departList = manager.getList(Integer.parseInt(root),false);
			}
		}
		if(departList.size()>0){
			for (int i = 0; i < departList.size(); i++) {
				departList.get(i).setSddscpUsertype(sddscpUsertype);
			}
		}
		self.setSddscpUsertype(sddscpUsertype);
		model.addAttribute("list", departList);
		model.addAttribute("self", self.getDepartment());
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "member/tree";
	}
	/**
	 * 显示侧边树(党员页)
	 * @return
	 */
	@RequestMapping(value = "/member/showtree.do")
	public String memberLeftDepartTree(String sddscpUsertype,ModelMap model){
		model.addAttribute("sddscpUsertype", sddscpUsertype);
		return "member/showTree";
	}
	/**
	 * 换届提醒页面
	 */
	@RequestMapping("/changeremind/changeRemind_main.do")
	public String changeRemindMain(){
		return "changeremind/changeRemind_main";
	}
	/**
	 * 换届提醒list
	 */
	@RequiresPermissions("changeremind:changeRemind_list")
	@RequestMapping("/changeremind/changeRemind_list.do")
	public String changeRemindList(ModelMap cmsDepartment,String departmentName,Integer departid,Integer pageNo,HttpServletRequest request){
		CmsUser self = CmsUtils.getUser(request);
		Integer pid = 0;
		boolean isPorg = false;
		if(!"admin".equals(self.getUsername())){
			if(manager.findlistByPid(pid)){
				departid = self.getDepartment().getId();
				pid = 0;
			}else {
				pid = self.getDepartment().getId();
				isPorg = true;
			}
		}else{
			isPorg = true;
		}
		List<CmsDepartment> departments = manager.changeRemindList(new Date(),departmentName,departid,pid);
		Pagination pagination = new Pagination(cpn(pageNo),20,departments.size(),departments);
		cmsDepartment.addAttribute("pagination",pagination);
		cmsDepartment.addAttribute("slef", self);
		cmsDepartment.addAttribute("isPorg",isPorg);
		return "changeremind/changeRemind_list";
	}
	
	/**
	 * 侧边树请求(党员页)
	 * @return
	 */
	@RequestMapping(value = "/changeremind/departTree_changeremind.do")
	public String departTreeshowChange(String root,Integer groupId, HttpServletRequest request,
			HttpServletResponse response, ModelMap model){
		log.debug("tree path={}", root);
		boolean isRoot;
		// jquery treeview的根请求为root=source
		if (StringUtils.isBlank(root) || "source".equals(root)) {
			isRoot = true;
		} else {
			isRoot = false;
		}
		model.addAttribute("isRoot", isRoot);
		List<CmsDepartment> departList;
		if(isRoot){
			departList= manager.getList(null,false);
		}else{
			departList = manager.getList(Integer.parseInt(root),false);
		}
		if(departList.size()>0){
			for (int i = 0; i < departList.size(); i++) {
				departList.get(i).setGroupid(groupId);
			}
		}
		model.addAttribute("list", departList);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "changeremind/departTree_changeremind";
	}
	/**
	 * 确认换届
	 * dialog数据
	 */
	@RequestMapping("/changeremind/v_confirm.do")
	@ResponseBody
	public Object confirm(Integer id){
		CmsDepartment depart = manager.findById(id);
		RisenChangeremindrecord crc = new RisenChangeremindrecord();
		if(depart!=null){
			if(depart.getName().contains("（")){
				String [] names = depart.getName().split("（");
				crc.setSddsccOrgname(names[0].trim());
			}else {
				crc.setSddsccOrgname(depart.getName());
			}
			crc.setSddsccOrgid(depart.getId());
			crc.setSddsccOsecretaryname(depart.getSddspoSecretary());
			crc.setSddsccOsecretaryid(depart.getSddspoSecretaryid());
			crc.setSddsccOsecretaryidc(depart.getSddspoSecretaryidc());
		}
		return crc;
	}
	
	
	@RequestMapping(value = "/changeremind/changeRemindLeft_departTree.do")
	public String changeRemindLeftDepartTree(){
		return "changeremind/changeRemindLeft_departTree";
	}
	
	@RequestMapping("/department/test.do")
	public String functionTest(Integer pid){
		manager.findlistByPid(pid);
		return "department/depart_main";
	}

	private WebErrors validatePriority(Integer[] ids, Integer[] priorities,
			HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		return errors;
	}

	private WebErrors validateSave(CmsDepartment bean, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		return errors;
	}

	private WebErrors validateEdit(Integer id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		if (vldExist(id, errors)) {
			return errors;
		}
		return errors;
	}

	private WebErrors validateUpdate(Integer id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		if (vldExist(id, errors)) {
			return errors;
		}
		return errors;
	}

	private WebErrors validateDelete(Integer[] ids, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		if (errors.ifEmpty(ids, "ids")) {
			return errors;
		}
		for (Integer id : ids) {
			vldExist(id, errors);
		}
		return errors;
	}

	private boolean vldExist(Integer id, WebErrors errors) {
		if (errors.ifNull(id, "id")) {
			return true;
		}
		CmsDepartment entity = manager.findById(id);
		if (errors.ifNotExist(entity, CmsDepartment.class, id)) {
			return true;
		}
		return false;
	}
	
	/**
	 * 组织权限管理LIST
	 */
	@RequestMapping("/department/powerlist.do")
	public String powerlist(Integer  root, HttpServletRequest request,ModelMap model) {
		List<CmsDepartment>list=manager.getList(root, false);
		model.addAttribute("list", list);
		model.addAttribute("parentId", root);
		return "department/power";
	}
	/**
	 * 组织栏目权限管理from
	 */
	@RequestMapping("/department/channelpower.do")
	public String channelPower(Integer id,Integer parentId, Integer pageNo,
			HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		CmsDepartment department= manager.findById(id);
		//List<CmsSite> siteList = cmsSiteMng.getList();
		List<CmsSite> siteList = new ArrayList<CmsSite>();
		CmsSite sitemodel = CmsUtils.getSite(request);
		siteList.add(sitemodel);
		List<CmsGuestbookCtg>ctgList=guestBookCtgMng.getList(CmsUtils.getSiteId(request));
		Map<String, Set<Integer>>departChannelIds=new HashMap<String, Set<Integer>>();
		for(CmsSite site:siteList){
			departChannelIds.put(site.getId().toString(), department.getChannelIds(site.getId()));
		}
		List<CmsDepartment>topDeparts=manager.getList(parentId, false);
		List<CmsDepartment> cityList = manager.getCorecdKeyList("地市");
		List<CmsDepartment> orgtypeList = manager.getCorecdKeyList("组织类型");
		model.addAttribute("department", department);
		model.addAttribute("siteList", siteList);
		model.addAttribute("ctgList", ctgList);
		Long t1 = System.currentTimeMillis();
		model.addAttribute("departments", CmsDepartment.getListForSelect(topDeparts));
		System.out.println("这一段运行了："+(System.currentTimeMillis()-t1));
		model.addAttribute("site",CmsUtils.getSite(request));
		model.addAttribute("departChannelIds", departChannelIds);
		model.addAttribute("ctgIds", department.getGuestBookCtgIds());
		model.addAttribute("parentId", parentId);
		model.addAttribute("cityList", cityList);
		model.addAttribute("orgtypeList", orgtypeList);
		return "department/channel_power";
	}
	
	/**
	 * 新版侧边树（根据登录组织显示对应数据）
	 * @return
	 */
	@RequestMapping("/department/newtree.do")
	public String newDepartTree(String root, HttpServletRequest request,
			HttpServletResponse response, ModelMap model,Integer iszb ) {
		log.debug("tree path={}", root);
		boolean isRoot;
		boolean isJgdw = false;
		boolean isZb = false;
		if(iszb!=null){
			if(iszb==1){
				isZb=true;
			}
		}
		// jquery treeview的根请求为root=source
		if (StringUtils.isBlank(root) || "source".equals(root)) {
			isRoot = true;
		} else {
			isRoot = false;
		}
		model.addAttribute("isRoot", isRoot);
		List<CmsDepartment> departList = new ArrayList<CmsDepartment>();
		CmsUser self=CmsUtils.getUser(request);
		CmsDepartment parent = new CmsDepartment();
		boolean isadmin = false;
		if("admin".equals(self.getUsername())){
			if(isRoot){
				departList= manager.getList(null,false);
			}else{
				departList = manager.getList(Integer.parseInt(root),false);
			}
			isadmin = true;
		}else {
			parent = manager.findById(self.getDepartment().getParent().getId());
			if(self.getUsername().indexOf("机关党委")!=-1){
				isJgdw = true;
				if(isRoot){
					departList= manager.getList(self.getDepartment().getParent().getId(),false);
				}else{
					departList = manager.getList(Integer.parseInt(root),false);
				}
			}else{
				if(isZb){
					if(isRoot){
						departList= manager.getList(self.getDepartment().getId(),false);
					}else{
						CmsDepartment depr = manager.findById(Integer.parseInt(root));
						departList.add(depr) ;
					}
				}else{
					if(isRoot){
						departList= manager.getList(self.getDepartment().getId(),false);
					}else{
						departList = manager.getList(Integer.parseInt(root),false);
					}
				}
			}
		}
		if(departList.size()<=0){
			isZb = true;
			List<CmsDepartment> list = manager.getList(self.getDepartment().getParent().getId(),false);
			for (int i = 0; i < list.size(); i++) {
				if(list.get(i).getId().equals(self.getDepartment().getId())){
					departList.add(list.get(i));
				}
			}
		}
		model.addAttribute("isadmin", isadmin);
		model.addAttribute("self", self.getDepartment());
		model.addAttribute("list", departList);
		model.addAttribute("parentdepart",parent);
		model.addAttribute("isJgdw",isJgdw);
		model.addAttribute("isZb",isZb);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		if(isadmin){
			return "department/tree";
		}else {
			if(isZb){
				return "department/zbTree";
			}
			return "department/newtree";
		}
	}
	
	/**
	 * 换届提醒tree
	 */
	@RequestMapping("/department/changeRemindTree.do")
	public String changeRemindTree(String root, HttpServletRequest request,
			HttpServletResponse response, ModelMap model,Integer iszb ) {
		log.debug("tree path={}", root);
		boolean isRoot;
		boolean isJgdw = false;
		boolean isZb = false;
		if(iszb!=null){
			if(iszb==1){
				isZb=true;
			}
		}
		// jquery treeview的根请求为root=source
		if (StringUtils.isBlank(root) || "source".equals(root)) {
			isRoot = true;
		} else {
			isRoot = false;
		}
		model.addAttribute("isRoot", isRoot);
		List<CmsDepartment> departList = new ArrayList<CmsDepartment>();
		CmsUser self=CmsUtils.getUser(request);
		CmsDepartment parent = new CmsDepartment();
		boolean isadmin = false;
		if("admin".equals(self.getUsername())){
			if(isRoot){
				departList= manager.getList(null,false);
			}else{
				departList = manager.getList(Integer.parseInt(root),false);
			}
			isadmin = true;
		}else {
			parent = manager.findById(self.getDepartment().getParent().getId());
			if(self.getUsername().indexOf("机关党委")!=-1){
				isJgdw = true;
				if(isRoot){
					departList= manager.getList(self.getDepartment().getParent().getId(),false);
				}else{
					departList = manager.getList(Integer.parseInt(root),false);
				}
			}else{
				if(isZb){
					if(isRoot){
						departList= manager.getList(self.getDepartment().getId(),false);
					}else{
						CmsDepartment depr = manager.findById(Integer.parseInt(root));
						departList.add(depr) ;
					}
				}else{
					if(isRoot){
						departList= manager.getList(self.getDepartment().getId(),false);
					}else{
						departList = manager.getList(Integer.parseInt(root),false);
					}
				}
			}
		}
		if(departList.size()<=0){
			isZb = true;
			List<CmsDepartment> list = manager.getList(self.getDepartment().getParent().getId(),false);
			for (int i = 0; i < list.size(); i++) {
				if(list.get(i).getId().equals(self.getDepartment().getId())){
					departList.add(list.get(i));
				}
			}
		}
		model.addAttribute("isadmin", isadmin);
		model.addAttribute("self", self.getDepartment());
		model.addAttribute("list", departList);
		model.addAttribute("parentdepart",parent);
		model.addAttribute("isJgdw",isJgdw);
		model.addAttribute("isZb",isZb);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		if(isadmin){
			return "changeremind/tree";
		}else {
			if(isZb){
				return "changeremind/zbTree";
			}
			return "changeremind/departTree_changeremind";
		}
	}
	/**
	 * 导入组织小工具
	 */
	@RequestMapping("/department/imptools.do")
	public String impOrgToUser(){
		manager.impOrgToUser();
		return "";
	}
	
	/**
	 * 栏目权限框架页
	 */
	@RequestMapping("/department/departrole_main.do")
	public String todepartmain(){
		return "department/departrole_main";
	}
	
	/**
	 * 站点栏目权限页
	 */
	@RequestMapping("/department/editrole.do")
	public String editrole(Integer id,Integer parentId, Integer pageNo,
			HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		CmsDepartment department= manager.findById(id);
		List<CmsSite> siteList = cmsSiteMng.getList();
		List<CmsGuestbookCtg>ctgList=guestBookCtgMng.getList(CmsUtils.getSiteId(request));
		Map<String, Set<Integer>>departChannelIds=new HashMap<String, Set<Integer>>();
		for(CmsSite site:siteList){
			departChannelIds.put(site.getId().toString(), department.getChannelIds(site.getId()));
		}
		List<CmsDepartment>topDeparts=manager.getList(null, false);
		
		model.addAttribute("department", department);
		model.addAttribute("siteList", siteList);
		model.addAttribute("ctgList", ctgList);
		model.addAttribute("departments", CmsDepartment.getListForSelect(topDeparts));
		model.addAttribute("site",CmsUtils.getSite(request));
		model.addAttribute("departChannelIds", departChannelIds);
		model.addAttribute("ctgIds", department.getGuestBookCtgIds());
		model.addAttribute("parentId", parentId);
		return "department/editrole";
	}
	
	/**
	 * 显示权限控制树
	 */
	@RequestMapping("/department/powertreeleft.do")
	public String powertreeleft(){
		return "department/powertreeleft";
	}
	
	/**
	 * 权限控制树
	 */
	@RequestMapping("/department/powertree.do")
	public String powertree(String root, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		log.debug("tree path={}", root);
		boolean isRoot;
		// jquery treeview的根请求为root=source
		if (StringUtils.isBlank(root) || "source".equals(root)) {
			isRoot = true;
		} else {
			isRoot = false;
		}
		model.addAttribute("isRoot", isRoot);
		List<CmsDepartment> departList;
		if(isRoot){
			departList= manager.getList(null,false);
		}else{
			departList = manager.getList(Integer.parseInt(root),false);
		}
		model.addAttribute("list", departList);
		response.setHeader("Cache-Control", "no-cache");
		response.setContentType("text/json;charset=UTF-8");
		return "department/powertree";
	}
	@RequestMapping("/department/getData.do")
	@ResponseBody
	public List<HashMap<String,String>> getDate(String userName){
		List<CmsUser>list=userMng.queryMeberByName(userName);
		List<HashMap<String,String>> datas=new ArrayList<HashMap<String,String>>();
		
		for (CmsUser u : list) {
			HashMap<String,String> m=new HashMap<String, String>();
			m.put("id", u.getId().toString());
			m.put("name", u.getUsername());
			m.put("idc",u.getSddscpIdnumber());
			datas.add(m);
		}
		return datas;
	}
	
	@RequiresPermissions("department:v_list_xt")
	@RequestMapping("/department/v_list_xt.do")
	public String xtlist(Integer  root, HttpServletRequest request,ModelMap model) {
		List<CmsDepartment>list=new ArrayList<CmsDepartment>();
		CmsUser user = CmsUtils.getUser(request);
		boolean isnullorg = manager.findlistByPid(user.getDepartment().getId());
		if(isnullorg){
			list.add(manager.findById(user.getDepartment().getId()));
		}else {
			if(root == null){
				list=manager.getList(user.getDepartment().getParent()!=null?user.getDepartment().getParent().getId():null, false);
			}else{
				list=manager.getList(user.getDepartment().getId(), false);
			}
		}
		model.addAttribute("ischildren",isnullorg);
		model.addAttribute("list", list);
		model.addAttribute("parentId", root);
		return "pbd/integrallist";
	}
	
	@Autowired
	private CmsLogMng cmsLogMng;
	@Autowired
	private CmsDepartmentMng manager;
	@Autowired
	private ChannelMng channelMng;
	@Autowired
	private CmsSiteMng cmsSiteMng;
	@Autowired
	private CmsGuestbookCtgMng guestBookCtgMng;
	@Autowired
	private CmsUserMng userMng;
	@Autowired
	private ICoreDictionaryService coreDictionaryService;
}