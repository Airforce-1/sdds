package com.jeecms.cms.action.front;

import static com.jeecms.cms.Constants.TPLDIR_INDEX;
import static com.jeecms.cms.statistic.CmsStatistic.SITEID;
import static com.jeecms.common.web.Constants.INDEX;
import static com.jeecms.common.web.Constants.INDEX_HTML;
import static com.jeecms.common.web.Constants.INDEX_HTML_MOBILE;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jeecms.cms.entity.main.Channel;
import com.jeecms.cms.entity.main.Content;
import com.jeecms.cms.entity.main.ContentCheck;
import com.jeecms.cms.manager.assist.CmsKeywordMng;
import com.jeecms.cms.manager.main.ChannelMng;
import com.jeecms.cms.manager.main.ContentBuyMng;
import com.jeecms.cms.manager.main.ContentMng;
import com.jeecms.cms.statistic.CmsStatistic;
import com.jeecms.cms.statistic.CmsStatisticSvc;
import com.jeecms.cms.statistic.CmsStatistic.CmsStatisticModel;
import com.jeecms.cms.statistic.CmsStatistic.TimeRange;
import com.jeecms.common.page.Paginable;
import com.jeecms.common.page.SimplePage;
import com.jeecms.common.util.DateUtils;
import com.jeecms.common.web.session.SessionProvider;
import com.jeecms.common.web.springmvc.RealPathResolver;
import com.jeecms.core.entity.CmsConfig;
import com.jeecms.core.entity.CmsDepartment;
import com.jeecms.core.entity.CmsGroup;
import com.jeecms.core.entity.CmsSite;
import com.jeecms.core.entity.CmsUser;
import com.jeecms.core.manager.CmsConfigMng;
import com.jeecms.core.manager.CmsDepartmentMng;
import com.jeecms.core.manager.CmsUserMng;
import com.jeecms.core.web.util.CmsUtils;
import com.jeecms.core.web.util.FrontUtils;
import com.jeecms.core.web.util.URLHelper;
import com.jeecms.core.web.util.URLHelper.PageInfo;
import com.risen.entity.RisenChangeremindrecord;
import com.risen.entity.RisenOrgLifeCalendar;
import com.risen.service.IRisenOrgLifeCalendarService;

@Controller
public class DynamicPageAct {
	private static final Logger log = LoggerFactory
			.getLogger(DynamicPageAct.class);
	/**
	 * 首页模板名称
	 */
	public static final String TPL_INDEX = "tpl.index";
	public static final String GROUP_FORBIDDEN = "login.groupAccessForbidden";
	public static final String CONTENT_STATUS_FORBIDDEN ="content.notChecked";
	
	/**
	 * 本日活动 查询所有活动
	 * @author slc 2016-11-19 下午2:36:30
	 * @param bean
	 * @return
	 */
	@RequestMapping(value = "/**/getData.jspx", method = RequestMethod.POST)
	@ResponseBody
	public Object getData(String id){
		RisenOrgLifeCalendar bean=olcmanager.findById(Integer.valueOf(id));
		
		return bean;
	}
	@RequestMapping(value = "/**/getEvent.jspx", method = RequestMethod.POST)
	@ResponseBody
	public Object getEvent(Integer id){
		List<String> dates=olcmanager.getEvent(id);
		return dates;
	}
	/**
	 * TOMCAT的默认路径
	 * 
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String index(HttpServletRequest request,HttpServletResponse response, ModelMap model) {
		CmsSite site = CmsUtils.getSite(request);
		FrontUtils.frontData(request, model, site);
		//判断是否是支部 --LQ
			Integer departId=null;
			if(request.getParameter("departId")!= null){
				departId=Integer.valueOf(request.getParameter("departId"));
			}
			//活动日历
			RisenOrgLifeCalendar baen=new RisenOrgLifeCalendar();
			baen.setStartDate(new Date());
			baen.setRisenlcOrgid(departId);
			List<RisenOrgLifeCalendar>list=olcmanager.ActivitiesMonth(baen);
			List<RisenOrgLifeCalendar>list2=olcmanager.ChanMonth(baen);
			if(list2!=null&&list2.size()>0){
				list.addAll(list2);
			}
			if(list.size()<1){
				model.addAttribute("month",null);
			}else{
				model.addAttribute("month",list);
			}
			
			SimpleDateFormat dft = new SimpleDateFormat("yyyy-MM-dd");
			Date beginDate = new Date();
			Calendar date = Calendar.getInstance();
			date.setTime(beginDate);		
			date.set(Calendar.DATE, date.get(Calendar.DATE) + 1);
			
			try {
				baen.setStartDate(dft.parse(dft.format(date.getTime())));
				String str=dft.format(date.getTime());
				dft = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				baen.setEndDate(dft.parse(str+" 23:59:59"));	
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			RisenOrgLifeCalendar olc=olcmanager.TodayRemind(baen);
			
			if(olc==null){
				model.addAttribute("day","1");
			}else{
				model.addAttribute("day",olc);
			}
	//	return FrontUtils.getTplPath(request, site.getSolutionPath(),TPLDIR_INDEX, TPL_INDEX);
		//带有其他路径则是非法请求(非内网)
		String uri=URLHelper.getURI(request);
		if(StringUtils.isNotBlank(uri)&&(!(uri.equals("/")||uri.equals("/index.jhtml")))){
			CmsConfig config=configMng.get();
			if(!config.getInsideSite()){
				return FrontUtils.pageNotFound(request, response, model);
			}
		}
		//使用静态首页而且静态首页存在
		if(existIndexPage(site)){
			return goToIndexPage(request, response, site);
		}else{
			String tpl = site.getTplIndex();
			if (!StringUtils.isBlank(tpl)) {
				return tpl;
			} else {
				return FrontUtils.getTplPath(request, site.getSolutionPath(),TPLDIR_INDEX, TPL_INDEX);
			}
		}
	}
	

	/**
	 * WEBLOGIC的默认路径
	 * 
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/index.jhtml", method = RequestMethod.GET)
	public String indexForWeblogic(HttpServletRequest request,HttpServletResponse response, ModelMap model) {
		return index(request, response,model);
	}

	/**
	 * 动态页入口
	 */
	@RequestMapping(value = "/**/*.*", method = RequestMethod.GET)
	public String dynamic(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		// 尽量不要携带太多参数，多使用标签获取数据。
		// 目前已知的需要携带翻页信息。
		// 获得页号和翻页信息吧。
		CmsSite site = CmsUtils.getSite(request);
		FrontUtils.frontData(request, model, site);
		int pageNo = URLHelper.getPageNo(request);
		String[] params = URLHelper.getParams(request);
		PageInfo info = URLHelper.getPageInfo(request);
		String[] paths = URLHelper.getPaths(request);
		CmsConfig config=configMng.get();
		
		Integer departId =null;
		Channel channel = channelMng.findByPathForTag(paths[1], site.getId());
		if(channel!=null){
			CmsDepartment cmsdepartment = channel.getDepart();
			if(cmsdepartment != null){
				departId = cmsdepartment.getId();
			}
		}

//			if(request.getParameter("departId")!= null){
//				departId=Integer.valueOf(request.getParameter(""));
//			}
			//活动日历
			RisenOrgLifeCalendar baen=new RisenOrgLifeCalendar();
			baen.setStartDate(new Date());
			baen.setRisenlcOrgid(departId);
			List<RisenOrgLifeCalendar>list=olcmanager.ActivitiesMonth(baen);
			List<RisenOrgLifeCalendar>list2=olcmanager.ChanMonth(baen);
			if(list2!=null&&list2.size()>0){
				list.addAll(list2);
			}
			if(list.size()<1){
				model.addAttribute("month",null);
			}else{
				model.addAttribute("month",list);
			}
			
			SimpleDateFormat dft = new SimpleDateFormat("yyyy-MM-dd");
			Date beginDate = new Date();
			Calendar date = Calendar.getInstance();
			date.setTime(beginDate);
			date.set(Calendar.DATE, date.get(Calendar.DATE) + 1);
			
			try {
				baen.setStartDate(dft.parse(dft.format(date.getTime())));
				String str=dft.format(date.getTime());
				dft = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				baen.setEndDate(dft.parse(str+" 23:59:59"));	
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			RisenOrgLifeCalendar olc=olcmanager.TodayRemind(baen);
			//今日提醒的换届
			RisenOrgLifeCalendar  olc2=olcmanager.TodayRemindChan(baen);
			if(olc2!=null){
				olc=olc2;
			}
			if(olc==null){
				model.addAttribute("day","1");
			}else{
				model.addAttribute("day",olc);
			}
	
		if(config.getInsideSite()){
			return network(paths, params, info, pageNo, request, response, model);
		}else{
			return extranet(paths, params, info, pageNo, request, response, model);
		}
	}
	
	private String network(String[] paths,String[] params,PageInfo info,Integer pageNo,HttpServletRequest request,
			HttpServletResponse response, ModelMap model){
		int len = paths.length;
		if (len == 2) {
			//首页
			if(paths[1].equals(INDEX)){
				return index(request,response, model);
			}else{
				// 单页
				return channel(paths[1],true, pageNo, params, info, request, response,
						model);
			}
		} else if (len == 3) {
			if (paths[2].equals(INDEX)) {
				// 栏目页
				return channel(paths[1],false, pageNo, params, info, request,
						response, model);
			} else {
				// 内容页
				try {
					Integer id = Integer.parseInt(paths[2]);
					return content(id, pageNo, params, info, request, response,
							model);
				} catch (NumberFormatException e) {
					log.debug("Content id must String: {}", paths[1]);
					return FrontUtils.pageNotFound(request, response, model);
				}
			}
		} else {
			log.debug("Illegal path length: {}, paths: {}", len, paths);
			return FrontUtils.pageNotFound(request, response, model);
		}
	}
	
	private String extranet(String[] paths,String[] params,PageInfo info,Integer pageNo,HttpServletRequest request,
			HttpServletResponse response, ModelMap model){
		int len = paths.length;
		if (len == 1) {
			// 单页
			return channel(paths[0],true, pageNo, params, info, request, response,
					model);
		} else if (len == 2) {
			if (paths[1].equals(INDEX)) {
				// 栏目页
				return channel(paths[0],false, pageNo, params, info, request,
						response, model);
			} else {
				// 内容页
				try {
					Integer id = Integer.parseInt(paths[1]);
					return content(id, pageNo, params, info, request, response,
							model);
				} catch (NumberFormatException e) {
					log.debug("Content id must String: {}", paths[1]);
					return FrontUtils.pageNotFound(request, response, model);
				}
			}
		} else {
			log.debug("Illegal path length: {}, paths: {}", len, paths);
			return FrontUtils.pageNotFound(request, response, model);
		}
	}

	public String channel(String path,boolean checkAlone, int pageNo, String[] params,
			PageInfo info, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		CmsSite site = CmsUtils.getSite(request);
		Channel channel = channelMng.findByPathForTag(path, site.getId());
		if (channel == null) {
			log.debug("Channel path not found: {}", path);
			return FrontUtils.pageNotFound(request, response, model);
		}
		//检查是否单页
		if(checkAlone){
			if(channel.getHasContent()){
				return FrontUtils.pageNotFound(request, response, model);
			}
		}
		model.addAttribute("channel", channel);
		FrontUtils.frontData(request, model, site);
		FrontUtils.frontPageData(request, model);
		String equipment=(String) request.getAttribute("ua");
		if(StringUtils.isNotBlank(equipment)&&equipment.equals("mobile")){
			return channel.getMobileTplChannelOrDef();
		}
		return channel.getTplChannelOrDef();
	}

	public String content(Integer id, int pageNo, String[] params,
			PageInfo info, HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		Content content = contentMng.findById(id);
		if (content == null) {
			log.debug("Content id not found: {}", id);
			return FrontUtils.pageNotFound(request, response, model);
		}
		Integer pageCount=content.getPageCount();
		if(pageNo>pageCount||pageNo<0){
			return FrontUtils.pageNotFound(request, response, model);
		}
		//非终审文章
		CmsConfig config=CmsUtils.getSite(request).getConfig();
		Boolean preview=config.getConfigAttr().getPreview();
		if(config.getViewOnlyChecked()&&!content.getStatus().equals(ContentCheck.CHECKED)){
			return FrontUtils.showMessage(request, model, CONTENT_STATUS_FORBIDDEN);
		}
		CmsUser user = CmsUtils.getUser(request);
		CmsSite site = content.getSite();
		Set<CmsGroup> groups = content.getViewGroupsExt();
		int len = groups.size();
		// 需要浏览权限
		if (len != 0) {
			// 没有登录
			if (user == null) {
				session.setAttribute(request, response, "loginSource", "needPerm");
				return FrontUtils.showLogin(request, model, site);
			}
			// 已经登录但没有权限
			Integer gid = user.getGroup().getId();
			boolean right = false;
			for (CmsGroup group : groups) {
				if (group.getId().equals(gid)) {
					right = true;
					break;
				}
			}
			//无权限且不支持预览
			if (!right&&!preview) {
				String gname = user.getGroup().getName();
				return FrontUtils.showMessage(request, model, GROUP_FORBIDDEN,
						gname);
			}
			//无权限支持预览
			if(!right&&preview){
				model.addAttribute("preview", preview);
				model.addAttribute("groups", groups);
			}
		}
		//收费模式
		if(content.getCharge()){
			if(user==null){
				session.setAttribute(request, response, "loginSource", "charge");
				return FrontUtils.showLogin(request, model, site);
			}else{
				//非作者且未购买
				if(!content.getUser().equals(user)){
					//用户已登录判断是否已经购买
					boolean hasBuy=contentBuyMng.hasBuyContent(user.getId(), content.getId());
					if(!hasBuy){
						try {
							String rediretUrl="/content/buy.jspx?contentId="+content.getId();
							if(StringUtils.isNotBlank(site.getContextPath())){
								rediretUrl=site.getContextPath()+rediretUrl;
							}
							response.sendRedirect(rediretUrl);
						} catch (IOException e) {
							//e.printStackTrace();
						}
					}
				}
			}
		}
		String txt = content.getTxtByNo(pageNo);
		// 内容加上关键字
		txt = cmsKeywordMng.attachKeyword(site.getId(), txt);
		Paginable pagination = new SimplePage(pageNo, 1, content.getPageCount());
		model.addAttribute("pagination", pagination);
		FrontUtils.frontPageData(request, model);
		model.addAttribute("content", content);
		model.addAttribute("channel", content.getChannel());
		model.addAttribute("title", content.getTitleByNo(pageNo));
		model.addAttribute("txt", txt);
		model.addAttribute("pic", content.getPictureByNo(pageNo));
		FrontUtils.frontData(request, model, site);
		String equipment=(String) request.getAttribute("ua");
		if(StringUtils.isNotBlank(equipment)&&equipment.equals("mobile")){
			return content.getMobileTplContentOrDef(content.getModel());
		}
		return content.getTplContentOrDef(content.getModel());
	}
	

	private boolean existIndexPage(CmsSite site){
		boolean exist=false;
		if(site.getStaticIndex()){
			File indexPage;
			if(site.getIndexToRoot()){
				indexPage=new File(realPathResolver.get(INDEX_HTML));
			}else{
				indexPage=new File(realPathResolver.get(site.getStaticDir()+INDEX_HTML));
			}
			if(indexPage.exists()){
				exist=true; 
			}
		}
		return exist;
	}
	
	private String goToIndexPage(HttpServletRequest request,HttpServletResponse response,CmsSite site){
		String equipment=(String) request.getAttribute("ua");
		try {
			String ctx="";
			if(StringUtils.isNotBlank(site.getContextPath())){
				ctx=site.getContextPath();
			}
			if(site.getIndexToRoot()){
				
				if(StringUtils.isNotBlank(equipment)&&equipment.equals("mobile")){
					response.sendRedirect(ctx+INDEX_HTML_MOBILE);
				}else{
					response.sendRedirect(ctx+INDEX_HTML);
				}
			}else{
				response.sendRedirect(ctx+site.getStaticDir()+INDEX_HTML);
			}
		} catch (IOException e) {
			//e.printStackTrace();
		}
		return FrontUtils.getTplPath(request, site.getSolutionPath(),TPLDIR_INDEX, TPL_INDEX); 
	}
	/**
	 * 本日活动 查询所有活动
	 * @author slc 2016-11-19 下午2:36:30
	 * @param bean
	 * @return
	 */
	@RequestMapping(value = "/**/getAll.jspx", method = RequestMethod.POST)
	@ResponseBody
	public Object ActivitiesToday(String date,Integer id){
		SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		RisenOrgLifeCalendar bean=new RisenOrgLifeCalendar();
		bean.setRisenlcOrgid(id);
		try {
			bean.setStartDate(format.parse(date+" 00:00:00"));
			bean.setEndDate(format.parse(date+" 23:59:59"));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		List<RisenOrgLifeCalendar>  list=olcmanager.ActivitiesToday(bean);
		
		//判断是否今日有换届
		List<RisenOrgLifeCalendar>  list1=olcmanager.ChanToday(bean);
		if(list1!=null&&list1.size()>0){
			list.addAll(list1);
		}
		return list;
	}
	
	
	/**
	 * 站群导航
	 */
	@RequestMapping(value = "/getSites.jspx", method = RequestMethod.POST)
	@ResponseBody
	public Object sitesNav(Integer pid){
		List<CmsDepartment> list = departmentMng.getList(pid, false);
		List<CmsDepartment> list2 = new ArrayList<CmsDepartment>();
		if(list.size()>0){
			for (int i = 0; i < list.size(); i++) {
				CmsDepartment model = new CmsDepartment();
				String departname = list.get(i).getName().trim();
				if(departname.contains("（")){
					String [] departnames = departname.split("（");
					departname = departnames[0];
				}
				String path = channelMng.getChannelPathByDid(list.get(i).getId());
				model.setName(departname);
				model.setId(list.get(i).getId());
				model.setChannelPath(path);
				list2.add(model);
			}
		}
		return list2;
	}
	/**
	 * 获取栏目路径
	 */
	@RequestMapping("/getChannelPaths.jspx")
	@ResponseBody
	public Object getChannelPaths(Integer departId){
		return channelMng.getChannelPathByDid(departId);
	}
	
	/**
	 * 获取各机关党委
	 */
	public Object getJgdw(Integer departid){
		return null;
	}
	/**
	 * 先锋排序
	 */
	@RequestMapping("/findXfpx.jspx")
	@ResponseBody
	public Object findXfpx(Integer departid){
		/**/List<CmsUser> list = cmsUserMng.scoreUserList(departid);
		List<String> list2 = new ArrayList<String>();
		for (int i = 0; i < list.size(); i++) {
			if(list.get(i).getSddscpXfscore()!=null && !("".equals(list.get(i).getSddscpXfscore()))){
				String str = "";
				str += list.get(i).getId()+","
				+list.get(i).getUsername()+","
				+list.get(i).getSddscpXfscore()+","
				+list.get(i).getSddscpFjf()+","
				+list.get(i).getSddscpJcf()+","
				+list.get(i).getSddscpPfsmfj()+","
				+list.get(i).getSddscpPfsmjc();
				list2.add(str);
			}
		}
		return list2;
		/*List<CmsUser> list = cmsUserMng.scoreUserList(departid);
		List<CmsUser> list2 = new ArrayList<CmsUser>();
		for (int i = 0; i < list.size(); i++) {
			if(list.get(i).getSddscpXfscore()!=null && !("".equals(list.get(i).getSddscpXfscore()))){
				list2.add(list.get(i));
			}
		}
		return list2;*/
	}
	/**
	 * 组织人员分析  From LQ
	 * @param bean
	 * @param request
	 * @return
	 */
	@RequestMapping("/getdybhqk.jspx")
	public String getdybh(String queryModel,Integer deptId, Integer year, Integer month,
			Integer day,Date begin,Date end,HttpServletRequest request, ModelMap model){
		//一、上年底总数 由于现阶段没有 整建制转入、整建制转出 标识，所以此处只统计总数
		CmsStatisticModel statisticModel = getStatisticModel(queryModel);
		Map<String, Object> restrictions = new HashMap<String, Object>();
		Integer siteId=CmsUtils.getSiteId(request);
		CmsSite site = CmsUtils.getSite(request);
		CmsUser loginUser = CmsUtils.getUser(request);	
		restrictions.put(SITEID, siteId);
		if (loginUser!=null) {
			deptId = loginUser.getDepartment().getId();
		}
		restrictions.put("deptId",deptId);
		Date now=Calendar.getInstance().getTime();
		Date dayBegin=DateUtils.getStartDate(now);
		Date weekBegin=DateUtils.getSpecficWeekStart(now, 0);
		Date monthBegin=DateUtils.getSpecficMonthStart(now, 0);
		Date yearBegin=DateUtils.getSpecficYearStart(now, 0);
		Date yearNext=DateUtils.getSpecficYearStart(now, 1);
		TimeRange dayTimeRange=TimeRange.getInstance(dayBegin, now);
		TimeRange weekTimeRange=TimeRange.getInstance(weekBegin, now);
		TimeRange monthTimeRange=TimeRange.getInstance(monthBegin, now);
		TimeRange yearTimeRange=TimeRange.getInstance(yearBegin, now);
		TimeRange totalTimeRange=TimeRange.getInstance(null, now);
		if(begin==null){
			begin=DateUtils.getStartDate(monthBegin);
		}else{
			begin=DateUtils.getStartDate(begin);
		}
		if(end==null){
			end=DateUtils.getFinallyDate(now);
		}else{
			end=DateUtils.getFinallyDate(end);
		}
		//List<CmsStatistic> list = cmsStatisticSvc.statisticByModel(MEMBER, statisticModel, year, month, day,begin,end, null);
		//putCommonData(statisticModel, list, year, month, day, model);
		
		long lastYearCount = cmsStatisticSvc.statistic(CmsStatistic.MEMBER, CmsStatisticModel.lastYear.toString(), yearTimeRange, restrictions);
		long thisYearAddCount = cmsStatisticSvc.statistic(CmsStatistic.MEMBER, CmsStatisticModel.thisYearAdd.toString(), yearTimeRange, restrictions);
		long thisYearDecreaseCount = cmsStatisticSvc.statistic(CmsStatistic.MEMBER, CmsStatisticModel.thisYearDecrease.toString(), yearTimeRange, restrictions);
		long endOfTheYearCount = cmsStatisticSvc.statistic(CmsStatistic.MEMBER, CmsStatisticModel.endOfTheYear.toString(), yearTimeRange.getInstance(yearNext, now), restrictions);
		long atTheEndOfTheYearCount = cmsStatisticSvc.statistic(CmsStatistic.MEMBER, CmsStatisticModel.atTheEndOfTheYear.toString(), yearTimeRange.getInstance(yearNext, now), restrictions);
		
		List<Object[]> lastYearList, thisYearAddList,thisYearDecreaseList;
		String asd = CmsStatisticModel.lastYear.toString();
		if(statisticModel.name().equals(CmsStatisticModel.lastYear.toString())){
			lastYearList=cmsStatisticSvc.statisticMemberByTarget(null,CmsStatisticModel.lastYear.toString(), yearBegin, null,restrictions);
			model.addAttribute("lastYearList", lastYearList);
		}else if(statisticModel.name().equals(CmsStatisticModel.thisYearAdd.toString())){
			thisYearAddList=cmsStatisticSvc.statisticMemberByTarget(null,CmsStatisticModel.thisYearAdd.toString(), yearNext, null,restrictions);
			model.addAttribute("thisYearAddList", thisYearAddList);
		}else if(statisticModel.name().equals(CmsStatisticModel.thisYearDecrease.toString())){
			thisYearDecreaseList=cmsStatisticSvc.statisticMemberByTarget(null,CmsStatisticModel.thisYearDecrease.toString(), yearNext, null,restrictions);
			model.addAttribute("thisYearDecreaseList", thisYearDecreaseList);
		}
		
		model.addAttribute("lastYearCount", lastYearCount);
		model.addAttribute("thisYearAddCount", thisYearAddCount);
		model.addAttribute("thisYearDecreaseCount", thisYearDecreaseCount);
		model.addAttribute("endOfTheYearCount", endOfTheYearCount);
		model.addAttribute("atTheEndOfTheYearCount", atTheEndOfTheYearCount);
		model.addAttribute("differCount",endOfTheYearCount-atTheEndOfTheYearCount);
		
		model.addAttribute("statisticModel", statisticModel.name());
		model.addAttribute("begin", begin);
		model.addAttribute("end", end);
		if (deptId==103) {
			return "/WEB-INF/t/cms/"+site.getPath()+"/"+site.getAccessPath()+"/alone/channel/dybh.html";
		}
		return "/WEB-INF/t/cms/"+site.getPath()+"/"+site.getAccessPath()+"/alone/dybh.html";
		
	}
	@RequestMapping("/getdyjbqk.jspx")
	public String getdyjbqk(String queryModel,Integer deptId, HttpServletRequest request, ModelMap model){
		CmsSite site = CmsUtils.getSite(request);
		CmsUser loginUser = CmsUtils.getUser(request);	
		if (loginUser!=null) {
			deptId = loginUser.getDepartment().getId();
		}
		List<Object[]> list = new ArrayList<Object[]>();
		if(StringUtils.isBlank(queryModel)){
			queryModel = "DZJG";
			list = cmsStatisticSvc.basicInfoList(queryModel, deptId, "6");
		}else{
			list = cmsStatisticSvc.basicInfoList(queryModel, deptId, "6");
		}
		model.addAttribute("statisticModel", queryModel);
		model.addAttribute("list",list);
		
		List<Object[]> dzjgCount = cmsStatisticSvc.basicInfoListCount("DZJG",deptId, "6");
		List<Object[]> sydwCount = cmsStatisticSvc.basicInfoListCount("SYDW",deptId, "6");
		List<Object[]> gqCount = cmsStatisticSvc.basicInfoListCount("GQ",deptId, "6");
		List<Object[]> ltxCount = cmsStatisticSvc.basicInfoListCount("LTX",deptId, "6");
		
		model.addAttribute("dzjgCount",dzjgCount);
		model.addAttribute("sydwCount",sydwCount);
		model.addAttribute("gqCount",gqCount);
		model.addAttribute("ltxCount",ltxCount);
		if (deptId==103) {
			return "/WEB-INF/t/cms/"+site.getPath()+"/"+site.getAccessPath()+"/alone/channel/dyjb.html";
		}
		return "/WEB-INF/t/cms/"+site.getPath()+"/"+site.getAccessPath()+"/alone/dyjb.html";
	}
	
	@RequestMapping("/getdyrdsj.jspx")
	public String getdyrdsj(String queryModel,Integer deptId, HttpServletRequest request, ModelMap model){
		CmsSite site = CmsUtils.getSite(request);
		CmsUser loginUser = CmsUtils.getUser(request);
		if (loginUser!=null) {
			deptId = loginUser.getDepartment().getId();
		}
		List<Object[]> list = new ArrayList<Object[]>();
		if(StringUtils.isBlank(queryModel)){
			queryModel = "DZJG";
			list = cmsStatisticSvc.partyTimeList(queryModel, deptId, null);
		}else{
			list = cmsStatisticSvc.partyTimeList(queryModel, deptId, null);
		}
		model.addAttribute("statisticModel", queryModel);
		model.addAttribute("list",list);
		
		List<Object[]> dzjgCount = cmsStatisticSvc.partyTimeListCount("DZJG",deptId, null);
		List<Object[]> sydwCount = cmsStatisticSvc.partyTimeListCount("SYDW",deptId, null);
		List<Object[]> gqCount = cmsStatisticSvc.partyTimeListCount("GQ",deptId, null);
		List<Object[]> ltxCount = cmsStatisticSvc.partyTimeListCount("LTX",deptId, null);
		
		model.addAttribute("dzjgCount",dzjgCount);
		model.addAttribute("sydwCount",sydwCount);
		model.addAttribute("gqCount",gqCount);
		model.addAttribute("ltxCount",ltxCount);
		if (deptId==103) {
			return "/WEB-INF/t/cms/"+site.getPath()+"/"+site.getAccessPath()+"/alone/channel/dyrd.html";
		}
		return "/WEB-INF/t/cms/"+site.getPath()+"/"+site.getAccessPath()+"/alone/dyrd.html";
	}
	
	@RequestMapping("/getdyxlqk.jspx")
	public String getxlqk(String queryModel,Integer deptId, HttpServletRequest request, ModelMap model){
		CmsSite site = CmsUtils.getSite(request);
		CmsUser loginUser = CmsUtils.getUser(request);
		if (loginUser!=null) {
			deptId = loginUser.getDepartment().getId();
		}
		List<Object[]> list = new ArrayList<Object[]>();
		if(StringUtils.isBlank(queryModel)){
			queryModel = "DZJG";
			list = cmsStatisticSvc.educationAnalysisList(queryModel, deptId, null);
		}else{
			list = cmsStatisticSvc.educationAnalysisList(queryModel, deptId, null);
		}
		model.addAttribute("statisticModel", queryModel);
		model.addAttribute("list",list);
		
		List<Object[]> dzjgCount = cmsStatisticSvc.educationAnalysisListCount("DZJG",deptId, null);
		List<Object[]> sydwCount = cmsStatisticSvc.educationAnalysisListCount("SYDW",deptId, null);
		List<Object[]> gqCount = cmsStatisticSvc.educationAnalysisListCount("GQ",deptId, null);
		List<Object[]> ltxCount = cmsStatisticSvc.educationAnalysisListCount("LTX",deptId, null);
		
		model.addAttribute("dzjgCount",dzjgCount);
		model.addAttribute("sydwCount",sydwCount);
		model.addAttribute("gqCount",gqCount);
		model.addAttribute("ltxCount",ltxCount);
		if (deptId==103) {
			return "/WEB-INF/t/cms/"+site.getPath()+"/"+site.getAccessPath()+"/alone/channel/dyxl.html";
		}
		return "/WEB-INF/t/cms/"+site.getPath()+"/"+site.getAccessPath()+"/alone/dyxl.html";
	}
	
	
	private CmsStatisticModel getStatisticModel(String queryModel) {
		if (!StringUtils.isBlank(queryModel)) {
			return CmsStatisticModel.valueOf(queryModel);
		}
		return CmsStatisticModel.lastYear;
	}
	@Autowired
	private ChannelMng channelMng;
	@Autowired
	private ContentMng contentMng;
	@Autowired
	private CmsKeywordMng cmsKeywordMng;
	@Autowired
	private CmsConfigMng configMng;
	@Autowired
	private RealPathResolver realPathResolver;
	@Autowired
	private ContentBuyMng contentBuyMng;
	@Autowired
	private SessionProvider session;
	@Autowired
	private IRisenOrgLifeCalendarService olcmanager;
	@Autowired
	private CmsDepartmentMng departmentMng;
	@Autowired
	private CmsStatisticSvc cmsStatisticSvc;
	@Autowired
	private CmsUserMng cmsUserMng;
}
