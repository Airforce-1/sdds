package com.jeecms.cms.action.admin.main;

import static com.jeecms.common.page.SimplePage.cpn;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jeecms.cms.entity.assist.CmsWebservice;
import com.jeecms.cms.manager.assist.CmsWebserviceMng;
import com.jeecms.common.page.Pagination;
import com.jeecms.common.web.CookieUtils;
import com.jeecms.common.web.RequestUtils;
import com.jeecms.common.web.ResponseUtils;
import com.jeecms.core.entity.CmsConfigItem;
import com.jeecms.core.entity.CmsDepartment;
import com.jeecms.core.entity.CmsGroup;
import com.jeecms.core.entity.CmsSite;
import com.jeecms.core.entity.CmsUser;
import com.jeecms.core.entity.CmsUserExt;
import com.jeecms.core.manager.CmsConfigItemMng;
import com.jeecms.core.manager.CmsDepartmentMng;
import com.jeecms.core.manager.CmsGroupMng;
import com.jeecms.core.manager.CmsLogMng;
import com.jeecms.core.manager.CmsUserMng;
import com.jeecms.core.web.WebErrors;
import com.jeecms.core.web.util.CmsUtils;
import com.risen.entity.CoreDictionary;
import com.risen.service.ICoreDictionaryService;

@Controller
public class CmsMemberAct {
	private static final Logger log = LoggerFactory
			.getLogger(CmsMemberAct.class);

	@RequiresPermissions("member:v_list")
	@RequestMapping("/member/v_list.do")
	public String list(String queryUsername, String queryEmail,
			Integer queryGroupId,Boolean queryDisabled, Integer pageNo,String sddscpUsertype,
			Integer departmentId,
			HttpServletRequest request, ModelMap model) {
		Pagination pagination = manager.getPage(queryUsername, queryEmail,
				null, queryGroupId, queryDisabled, false, null, null,
				null,null,null,null,cpn(pageNo),
				CookieUtils.getPageSize(request),sddscpUsertype,"0"); //sddscpUsertype 后面的  "0" 这个值（isadminlist）是判断是否是管理员list，0代表否,即 从党员管理模块进入
		model.addAttribute("pagination", pagination);

		model.addAttribute("queryUsername", queryUsername);
		model.addAttribute("queryEmail", queryEmail);
		model.addAttribute("queryGroupId", queryGroupId);
		model.addAttribute("queryDisabled", queryDisabled);
		model.addAttribute("groupList", cmsGroupMng.getList());
		model.addAttribute("sddscpUsertype", sddscpUsertype);
		model.addAttribute("departmentId", departmentId);
		return "member/list";
	}

	@RequiresPermissions("member:v_add")
	@RequestMapping("/member/v_add.do")
	public String add(ModelMap model,HttpServletRequest request) {
		CmsSite site=CmsUtils.getSite(request);
		List<CmsGroup> groupList = cmsGroupMng.getList();
		List<CmsConfigItem>registerItems=cmsConfigItemMng.getList(site.getConfig().getId(), CmsConfigItem.CATEGORY_REGISTER);
		//获取字典 begin
		List<CmsUser> partypositionList = manager.getCorecdKeyList("党内职务");
		List<CmsUser> outpartyList = manager.getCorecdKeyList("出党");
		List<CmsUser>  jobstatusList = manager.getCorecdKeyList("工作身份");
		List<CoreDictionary>jiguan=coreDictionaryService.getJobDictByOrgType(1);
		List<CoreDictionary>dangzongzhi=coreDictionaryService.getJobDictByOrgType(2);
		List<CoreDictionary>zhibu=coreDictionaryService.getJobDictByOrgType(3);
		//获取字典 end
		//获取机关党委
		try {
		CmsUser loginUser=CmsUtils.getUser(request);	
		
		List<CmsDepartment>jiguanOrg=cmsDeptMng.getDeptByTypeAndLoginId("机关党委",loginUser.getDepartment().getId());
		//获取党总支
		List<CmsDepartment>zongOrg=cmsDeptMng.getDeptByTypeAndLoginId("党总支",loginUser.getDepartment().getId());
		//获取支部
		List<CmsDepartment>zhibuOrg=cmsDeptMng.getDeptByTypeAndLoginId("支部",loginUser.getDepartment().getId());
		model.addAttribute("registerItems", registerItems);
		model.addAttribute("groupList", groupList);
		model.addAttribute("partypositionList", partypositionList);
		model.addAttribute("outpartyList", outpartyList);
		model.addAttribute("jobstatusList", jobstatusList);
		model.addAttribute("jiguan", jiguan);
		model.addAttribute("dangzongzhi", dangzongzhi);
		model.addAttribute("zhibu", zhibu);
		model.addAttribute("jiguanOrg", jiguanOrg);
		model.addAttribute("zongOrg", zongOrg);
		model.addAttribute("zhibuOrg", zhibuOrg);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "member/add";
	}

	@RequiresPermissions("member:v_edit")
	@RequestMapping("/member/v_edit.do")
	public String edit(Integer id, Integer queryGroupId, Boolean queryDisabled,
			HttpServletRequest request, ModelMap model) {
		String queryUsername = RequestUtils.getQueryParam(request,
				"queryUsername");
		String queryEmail = RequestUtils.getQueryParam(request, "queryEmail");
		CmsSite site=CmsUtils.getSite(request);
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		} 
		CmsUser user=manager.findById(id);
		List<CmsGroup> groupList = cmsGroupMng.getList();
		List<CmsConfigItem>registerItems=cmsConfigItemMng.getList(site.getConfig().getId(), CmsConfigItem.CATEGORY_REGISTER);
		List<String>userAttrValues=new ArrayList<String>();
		for(CmsConfigItem item:registerItems){
			userAttrValues.add(user.getAttr().get(item.getField()));
		}
		//获取字典 begin
		List<CmsUser> partypositionList = manager.getCorecdKeyList("党内职务");
		List<CmsUser> outpartyList = manager.getCorecdKeyList("出党");
		List<CmsUser>  jobstatusList = manager.getCorecdKeyList("工作身份");
		List<CoreDictionary>jiguan=coreDictionaryService.getJobDictByOrgType(1);
		List<CoreDictionary>dangzongzhi=coreDictionaryService.getJobDictByOrgType(2);
		List<CoreDictionary>zhibu=coreDictionaryService.getJobDictByOrgType(3);
		//获取当前登录USER
		CmsUser loginUser=CmsUtils.getUser(request);
		List<CmsDepartment>jiguanOrg=cmsDeptMng.getDeptByTypeAndLoginId("机关党委",loginUser.getDepartment().getId());
		//获取党总支
		List<CmsDepartment>zongOrg=cmsDeptMng.getDeptByTypeAndLoginId("党总支",loginUser.getDepartment().getId());
		//获取支部
		List<CmsDepartment>zhibuOrg=cmsDeptMng.getDeptByTypeAndLoginId("支部",loginUser.getDepartment().getId());
		//获取字典 end
		model.addAttribute("queryUsername", queryUsername);
		model.addAttribute("queryEmail", queryEmail);
		model.addAttribute("queryGroupId", queryGroupId);
		model.addAttribute("queryDisabled", queryDisabled);
		model.addAttribute("groupList", groupList);
		model.addAttribute("cmsMember", user);
		model.addAttribute("registerItems", registerItems);
		model.addAttribute("userAttrValues", userAttrValues);
		model.addAttribute("partypositionList", partypositionList);
		model.addAttribute("outpartyList", outpartyList);
		model.addAttribute("jobstatusList", jobstatusList);
		model.addAttribute("jiguan", jiguan);
		model.addAttribute("dangzongzhi", dangzongzhi);
		model.addAttribute("zhibu", zhibu);
		model.addAttribute("jiguanOrg", jiguanOrg);
		model.addAttribute("zongOrg", zongOrg);
		model.addAttribute("zhibuOrg", zhibuOrg);
		return "member/edit";
	}

	@RequiresPermissions("member:o_save")
	@RequestMapping("/member/o_save.do")
	public String save(CmsUser bean, CmsUserExt ext, String username,
			String email, String password, Integer groupId,Integer grain,
			String sddscpIdnumber,String sddscpNational,String sddscpAddress,String sddscpPoliticaltype,
			String sddscpPartyposition,String sddscpBasescore,Integer sddscpXfscore,String sddscpKfscore,
			String sddscpSumscore,String sddscpOrgname,Date sddscpJoinpartydate,Date sddscpEbranchdate,
			Date sddscpJoinworktime,String sddscpEducation,String sddscpGraduate,String sddscpDegree,
			String sddscpMatrimonial,String sddscpWorkplace,String sddscpJobposition,String sddscpNative,
			String sddscpResidence,String sddscpOtherphone,String sddscpUsertype,Integer departmentId,String departName,
			String sddscpExcellentcause,String sddscpUnqualifiedcause,String sddscpIsinjob,String sddscpOutpartytype,String sddscpOutpartycause,
			String sddscpJobstatus,
			Integer sddscpJgdw,Integer sddscpDzz,Integer sddscpZb,String sddscpJgdwjob,String sddscpDzzjob,String sddscpZbjob,String sddscpAssess,
			String sddscpChanges,String sddscpChangestype,String sddscpJgdwname,String sddscpDzzname,String sddscpZbname,
			HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateSave(bean, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		String ip = RequestUtils.getIpAddr(request);
		Map<String,String>attrs=RequestUtils.getRequestMap(request, "attr_");
		bean = manager.registerMember(username, email, password, ip, groupId,
				grain, sddscpIdnumber, sddscpNational, sddscpAddress,
				sddscpPoliticaltype, sddscpPartyposition, sddscpBasescore,
				sddscpXfscore, sddscpKfscore, sddscpSumscore, sddscpOrgname,
				sddscpJoinpartydate, sddscpEbranchdate, sddscpJoinworktime,
				sddscpEducation, sddscpGraduate, sddscpDegree,
				sddscpMatrimonial, sddscpWorkplace, sddscpJobposition,
				sddscpNative, sddscpResidence, sddscpOtherphone,
				sddscpUsertype, departmentId, departName, sddscpExcellentcause,
				sddscpUnqualifiedcause, sddscpIsinjob, sddscpOutpartytype,
				sddscpOutpartycause, sddscpJobstatus, "1", null, null,
				sddscpJgdw, sddscpDzz, sddscpZb, sddscpJgdwjob, sddscpDzzjob,
				sddscpZbjob, sddscpAssess, sddscpChanges, sddscpChangestype, sddscpJgdwname, sddscpDzzname, sddscpZbname, false, ext, attrs,true);
	/*	bean = manager.registerMember(username, email, password, ip, groupId,grain,sddscpIdnumber,sddscpNational,sddscpAddress,sddscpPoliticaltype,sddscpPartyposition,sddscpBasescore,
				sddscpXfscore,sddscpKfscore,sddscpSumscore,sddscpOrgname,sddscpJoinpartydate,sddscpEbranchdate,sddscpJoinworktime,sddscpEducation,sddscpGraduate,sddscpDegree,sddscpMatrimonial,
				sddscpWorkplace,sddscpJobposition,sddscpNative,sddscpResidence,sddscpOtherphone,sddscpUsertype,departmentId,departName,sddscpExcellentcause,sddscpUnqualifiedcause,
				sddscpIsinjob,sddscpOutpartytype,sddscpOutpartycause,sddscpJobstatus, "1", null, null, sddscpJgdw, sddscpDzz, sddscpZb, sddscpJgdwjob, sddscpDzzjob, sddscpZbjob, sddscpAssess,false,ext,attrs);*/
		cmsWebserviceMng.callWebService("false",username, password, email, ext,CmsWebservice.SERVICE_TYPE_ADD_USER);
		log.info("save CmsMember id={}", bean.getId());
		cmsLogMng.operating(request, "cmsMember.log.save", "id=" + bean.getId()
				+ ";username=" + bean.getUsername());
		return "redirect:v_list.do";
	}

	@RequiresPermissions("member:o_update")
	@RequestMapping("/member/o_update.do")
	public String update(Integer id, String email, String password,
			Boolean disabled, CmsUserExt ext, Integer groupId,Integer grain,
			String queryUsername, String queryEmail, Integer queryGroupId,String sddscpIdnumber,String sddscpNational,String sddscpAddress,String sddscpPoliticaltype,
			String sddscpPartyposition,String sddscpBasescore,Integer sddscpXfscore,String sddscpKfscore,
			String sddscpSumscore,String sddscpOrgname,Date sddscpJoinpartydate,Date sddscpEbranchdate,
			Date sddscpJoinworktime,String sddscpEducation,String sddscpGraduate,String sddscpDegree,
			String sddscpMatrimonial,String sddscpWorkplace,String sddscpJobposition,String sddscpNative,
			String sddscpResidence,String sddscpOtherphone,String sddscpUsertype,Integer departmentId,String departName,
			String sddscpExcellentcause,String sddscpUnqualifiedcause,String sddscpIsinjob,String sddscpOutpartytype,String sddscpOutpartycause,
			Integer sddscpJgdw,Integer sddscpDzz,Integer sddscpZb,String sddscpJgdwjob,String sddscpDzzjob,String sddscpZbjob,String sddscpAssess,
			String sddscpChanges,String sddscpChangestype,String sddscpJgdwname,String sddscpDzzname,String sddscpZbname,
			String sddscpJobstatus,Boolean queryDisabled, Integer pageNo, HttpServletRequest request,
			ModelMap model) {
		WebErrors errors = validateUpdate(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		Map<String,String>attrs=RequestUtils.getRequestMap(request, "attr_");
		CmsUser bean = manager.updateMember(id, email, password, disabled, ext,groupId,grain,sddscpIdnumber,sddscpNational,sddscpAddress,sddscpPoliticaltype,sddscpPartyposition,
				sddscpBasescore,sddscpXfscore,sddscpKfscore,sddscpSumscore,sddscpOrgname,sddscpJoinpartydate,sddscpEbranchdate,sddscpJoinworktime,sddscpEducation,
				sddscpGraduate,sddscpDegree,sddscpMatrimonial,sddscpWorkplace,sddscpJobposition,sddscpNative,sddscpResidence,sddscpOtherphone,sddscpUsertype,departmentId,
				departName,sddscpExcellentcause,sddscpUnqualifiedcause,sddscpIsinjob,sddscpOutpartytype,sddscpOutpartycause,sddscpJobstatus,
				 sddscpJgdw, sddscpDzz, sddscpZb, sddscpJgdwjob, sddscpDzzjob, sddscpZbjob, sddscpAssess, sddscpChanges, sddscpChangestype, sddscpJgdwname, sddscpDzzname, sddscpZbname,
				attrs);
		cmsWebserviceMng.callWebService("false",bean.getUsername(), password, email, ext,CmsWebservice.SERVICE_TYPE_UPDATE_USER);
		log.info("update CmsMember id={}.", bean.getId());
		cmsLogMng.operating(request, "cmsMember.log.update", "id="
				+ bean.getId() + ";username=" + bean.getUsername());
		return list(queryUsername, queryEmail, queryGroupId,queryDisabled,
				pageNo, sddscpUsertype,departmentId,request, model);
	}

	@RequiresPermissions("member:o_delete")
	@RequestMapping("/member/o_delete.do")
	public String delete(Integer[] ids, Integer queryGroupId,
			Boolean queryDisabled, Integer pageNo,String sddscpUsertype,Integer departmentId, HttpServletRequest request,
			ModelMap model) {
		String queryUsername = RequestUtils.getQueryParam(request,
				"queryUsername");
		String queryEmail = RequestUtils.getQueryParam(request, "queryEmail");
		WebErrors errors = validateDelete(ids, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		CmsUser[] beans = manager.deleteByIds(ids);
		for (CmsUser bean : beans) {
			Map<String,String>paramsValues=new HashMap<String, String>();
			paramsValues.put("username", bean.getUsername());
			paramsValues.put("admin", "false");
			cmsWebserviceMng.callWebService(CmsWebservice.SERVICE_TYPE_DELETE_USER, paramsValues);
			log.info("delete CmsMember id={}", bean.getId());
			cmsLogMng.operating(request, "cmsMember.log.delete", "id="
					+ bean.getId() + ";username=" + bean.getUsername());
		}
		return list(queryUsername, queryEmail, queryGroupId,queryDisabled,
				pageNo,sddscpUsertype,departmentId, request, model);
	}
	
	@RequiresPermissions("member:o_check")
	@RequestMapping("/member/o_check.do")
	public String check(Integer[] ids, Integer queryGroupId,
			Boolean queryDisabled, Integer pageNo, String sddscpUsertype,Integer departmentId,HttpServletRequest request,
			ModelMap model) {
		String queryUsername = RequestUtils.getQueryParam(request,
				"queryUsername");
		String queryEmail = RequestUtils.getQueryParam(request, "queryEmail");
		WebErrors errors = validateDelete(ids, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		for(Integer id:ids){
			CmsUser user=manager.findById(id);
			user.setDisabled(false);
			manager.updateUser(user);
			log.info("check CmsMember id={}", user.getId());
			cmsLogMng.operating(request, "cmsMember.log.delete", "id="
					+ user.getId() + ";username=" + user.getUsername());
		}
		return list(queryUsername, queryEmail, queryGroupId, queryDisabled,
				pageNo, sddscpUsertype,departmentId,request, model);
	}

	@RequiresPermissions("member:v_check_username")
	@RequestMapping(value = "/member/v_check_username.do")
	public void checkUsername(HttpServletRequest request, HttpServletResponse response) {
		String username=RequestUtils.getQueryParam(request,"username");
		String pass;
		if (StringUtils.isBlank(username)) {
			pass = "false";
		} else {
			pass = manager.usernameNotExist(username) ? "true" : "false";
		}
		ResponseUtils.renderJson(response, pass);
	}
	
	

	private WebErrors validateSave(CmsUser bean, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		return errors;
	}

	private WebErrors validateEdit(Integer id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		if (vldExist(id, errors)) {
			return errors;
		}
		return errors;
	}

	private WebErrors validateUpdate(Integer id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		if (vldExist(id, errors)) {
			return errors;
		}
		// TODO 验证是否为管理员，管理员不允许修改。
		return errors;
	}

	private WebErrors validateDelete(Integer[] ids, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		if(!errors.ifEmpty(ids, "ids")){
			for (Integer id : ids) {
				vldExist(id, errors);
			}
		}
		return errors;
	}

	private boolean vldExist(Integer id, WebErrors errors) {
		if (errors.ifNull(id, "id")) {
			return true;
		}
		CmsUser entity = manager.findById(id);
		if (errors.ifNotExist(entity, CmsUser.class, id)) {
			return true;
		}
		return false;
	}
	
	/**
	 * 进页面方法
	 * @param model
	 * @param sddscpUsertype
	 * @return
	 */
	@RequestMapping("/member/topage.do")
	public String toPage(Model model,String sddscpUsertype){
		model.addAttribute("sddscpUsertype",sddscpUsertype);
		if("1".equals(sddscpUsertype)){
			return "member/list_injob";
		}else if("2".equals(sddscpUsertype)){
			return "member/list_excellent";
		}else if("3".equals(sddscpUsertype)){
			return "member/list_unqualified";
		}else if("4".equals(sddscpUsertype)){
			return "member/list_develop";
		}else if("5".equals(sddscpUsertype)){
			return "member/list_history";
		}
		else{
			return "member/list_all";
		}
	}
	
	/**
	 * 根据组织获取党员列表
	 * @param queryUsername
	 * @param queryEmail
	 * @param queryGroupId
	 * @param queryDisabled
	 * @param pageNo
	 * @param request
	 * @param model
	 * @param departId
	 * @return
	 */
	@RequiresPermissions("member:getListByDepartId")
	@RequestMapping("/member/getListByDepartId.do")
	public String getListByDepartId(String queryUsername,String sddscpUsertype, String queryEmail, Boolean queryDisabled, Integer pageNo,
			HttpServletRequest request, ModelMap model,Integer departId) {
		Pagination pagination = manager.getMemberByDepartId(departId,sddscpUsertype,cpn(pageNo),CookieUtils.getPageSize(request));
		model.addAttribute("pagination", pagination);
		model.addAttribute("departId",departId);
		model.addAttribute("sddscpUsertype",sddscpUsertype);
		model.addAttribute("queryUsername", queryUsername);
		model.addAttribute("queryEmail", queryEmail);
		model.addAttribute("queryDisabled", queryDisabled);
		model.addAttribute("groupList", cmsGroupMng.getList());
		return "member/list";
	}
	
	/**
	 * 替换数据工具
	 * @return
	 */
	@RequestMapping("/member/changeuserdata.do")
	public String changeuserdata(boolean all){
		manager.finduserdatetool(all);
		return "";
	}
	/**
	  * 评分列表
	  */
	@RequestMapping("/scoreuserxf/scoreUserList.do")
	 public String scoreUserList(HttpServletRequest request, ModelMap model){
		 CmsUser user = CmsUtils.getUser(request);
		 List<CmsUser> list = manager.scoreUserList(user.getDepartment().getId());
		 model.addAttribute("list", list);
		 return "scoreuserxf/scoreUserXF";
	 }
	/**
	 * 获取评分
	 * dialog数据
	 */
	@RequestMapping(value = "/scoreuserxf/getUserPf.do", method = RequestMethod.POST)
	@ResponseBody
	public Object getUserPf(Integer userid){
		CmsUser user = manager.findById(userid);
		//CmsUser user2 = new CmsUser();
		String str = "";
		/*user2.setId(user.getId());
		user2.setUsername(user.getUsername());
		if(user.getSddscpXfscore()!=null && !("".equals(user.getSddscpXfscore()))){
			user2.setSddscpXfscore(user.getSddscpXfscore());
		}else {
			user2.setSddscpXfscore(0);
		}
		if(user.getSddscpFjf()!=null && !("".equals(user.getSddscpFjf()))){
			user2.setSddscpFjf(user.getSddscpFjf());
		}else {
			user2.setSddscpFjf(0);
		}
		if(user.getSddscpJcf()!=null && !("".equals(user.getSddscpJcf()))){
			user2.setSddscpJcf(user.getSddscpJcf());
		}else {
			user2.setSddscpJcf(0);
		}
		if(StringUtils.isNotBlank(user.getSddscpPfsmfj())){
			user2.setSddscpPfsmfj(user.getSddscpPfsmfj());
		}
		if(StringUtils.isNotBlank(user.getSddscpPfsmjc())){
			user2.setSddscpPfsmjc(user.getSddscpPfsmjc());
		}*/
		str += user.getId()+","
		+user.getUsername()+","
		+user.getSddscpXfscore()+","
		+user.getSddscpFjf()+","
		+user.getSddscpJcf()+","
		+user.getSddscpPfsmfj()+","
		+user.getSddscpPfsmjc();
		return  str;
	}

	 /**
	  * 更新分数
	  */
	@RequestMapping("/scoreuserxf/updateScore.do")
	 public String updateScore(CmsUser model){
		manager.updateScore(model);
		return "redirect:scoreUserList.do";
	 }
	@Autowired
	private CmsDepartmentMng cmsDeptMng;
	@Autowired
	private CmsGroupMng cmsGroupMng;
	@Autowired
	private CmsLogMng cmsLogMng;
	@Autowired
	private CmsUserMng manager;
	@Autowired
	private CmsConfigItemMng cmsConfigItemMng;
	@Autowired
	private CmsWebserviceMng cmsWebserviceMng;
	@Autowired
	private ICoreDictionaryService coreDictionaryService;
}