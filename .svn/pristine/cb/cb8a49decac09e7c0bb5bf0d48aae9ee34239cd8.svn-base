package com.risen.action;

import static com.jeecms.common.page.SimplePage.cpn;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.jeecms.cms.Constants;
import com.jeecms.cms.entity.assist.CmsPlug;
import com.jeecms.cms.manager.assist.CmsFileMng;
import com.jeecms.common.page.Pagination;
import com.jeecms.common.upload.FileRepository;
import com.jeecms.common.web.CookieUtils;
import com.jeecms.core.entity.CmsDepartment;
import com.jeecms.core.entity.CmsSite;
import com.jeecms.core.entity.CmsUser;
import com.jeecms.core.entity.Ftp;
import com.jeecms.core.manager.CmsDepartmentMng;
import com.jeecms.core.manager.CmsUserMng;
import com.jeecms.core.manager.DbFileMng;
import com.jeecms.core.web.WebErrors;
import com.jeecms.core.web.util.CmsUtils;
import com.risen.entity.RisenTarget;
import com.risen.entity.RisenTargetDetail;
import com.risen.service.IRisenTargetDetailService;
import com.risen.service.IRisenTargetService;
import com.risen.service.impl.RisenDevelopmentService;

@Controller
public class RisenTargetDetailAct {
	private static final Logger log = LoggerFactory.getLogger(RisenTargetDetailAct.class);
	@RequiresPermissions("risenTargetDetail:v_list")
	@RequestMapping("/risenTargetDetail/v_list.do")
	public String list(Integer pageNo, HttpServletRequest request, ModelMap model) {
		try {
			CmsUser user = CmsUtils.getUser(request);
			Integer parentId = user.getDepartment().getId();
			List<CmsDepartment> departments = departmentService.getList(parentId, false);
			if(departments.size()>0){
				model.addAttribute("DepartmentSub",departments.size());
			}else{
				model.addAttribute("DepartmentSub",0);
			}
			Pagination pagination = manager.findByOrgId(cpn(pageNo), CookieUtils.getPageSize(request),parentId);
			model.addAttribute("pagination",pagination);
			model.addAttribute("pageNo",pagination.getPageNo());
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return "development_partymembers/risenTargetDetail/list";
	}
	@RequiresPermissions("risenTargetDetail:v_flist")
	@RequestMapping("/risenTargetDetail/v_flist.do")
	public String finishList(Integer pageNo, HttpServletRequest request, ModelMap model) {
		try {
			CmsUser user = CmsUtils.getUser(request);
			Integer parentId = user.getDepartment().getId();
			Pagination pagination = manager.getMyTarget(cpn(pageNo), CookieUtils.getPageSize(request),String.valueOf(parentId));
			model.addAttribute("pagination",pagination);
			model.addAttribute("pageNo",pagination.getPageNo());
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return "development_partymembers/risenTargetDetail/flist";
	}
	@RequiresPermissions("risenTargetDetail:showInfo")
	@RequestMapping("/risenTargetDetail/showInfo.do")
	public String showInfo(HttpServletRequest request,ModelMap model){
		String parentId = request.getParameter("parentId");
		CmsUser user = CmsUtils.getUser(request);
		String deptId = String.valueOf(user.getDepartment().getId());
		RisenTargetDetail detail = manager.showInfo(Integer.valueOf(parentId), Integer.valueOf(deptId));
		model.addAttribute("RisenTargetDetail",detail);
		model.addAttribute("parentId", parentId);
		return "development_partymembers/risenTargetDetail/edit";
	}
	@RequiresPermissions("risenTargetDetail:showBaseInfo")
	@RequestMapping("/risenTargetDetail/showBaseInfo.do")
	public String showBaseInfo(HttpServletRequest request,ModelMap model){
		Integer id = Integer.valueOf(request.getParameter("id"));
		Integer pid = Integer.valueOf(request.getParameter("parentId"));
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		model.addAttribute("RisenTargetDetail", manager.findById(id));
		model.addAttribute("ParentId", pid);
		return "development_partymembers/risenTargetDetail/showBaseInfo";
	}
	@RequiresPermissions("risenTargetDetail:giveScore")
	@RequestMapping("/risenTargetDetail/giveScore.do")
	public String giveScore(HttpServletRequest request,ModelMap model){
		Integer id = Integer.valueOf(request.getParameter("id"));
		Integer pid = Integer.valueOf(request.getParameter("parentId"));
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		RisenTarget target = targetService.findById(manager.findById(id).getRisentgdPid());
		int totalscore = target.getRisentgTotalScore().intValue();
		int percent = target.getRisentgGualityPercent().intValue();
		int score = totalscore*percent/100;
		model.addAttribute("RisenTargetDetail", manager.findById(id));
		model.addAttribute("MaxScore", score);
		model.addAttribute("ParentId", pid);
		return "development_partymembers/risenTargetDetail/giveScore";
	}
	//上传
	@RequiresPermissions("risenTargetDetail:o_upload_doc")
	@RequestMapping("/risenTargetDetail/o_upload_doc.do")
	public String uploadDoc(
			@RequestParam(value = "docFile", required = false) MultipartFile file,
			String filename, HttpServletRequest request, ModelMap model) {
		CmsSite site = CmsUtils.getSite(request);
		CmsUser user = CmsUtils.getUser(request);
		String origName = file.getOriginalFilename();
		String ext = FilenameUtils.getExtension(origName).toLowerCase(
				Locale.ENGLISH);
		WebErrors errors = validateUpload(file, request);
		if (errors.hasErrors()) {
			model.addAttribute("error", errors.getErrors().get(0));
			return "development_partymembers/risenTargetDetail/wenku_iframe";
		}
		// TODO 检查允许上传的后缀
		try {
			String fileUrl;
			if (site.getConfig().getUploadToDb()) {
				String dbFilePath = site.getConfig().getDbFileUri();
				if (!StringUtils.isBlank(filename)
						&& FilenameUtils.getExtension(filename).equals(ext)) {
					filename = filename.substring(dbFilePath.length());
					fileUrl = dbFileMng.storeByFilename(filename, file
							.getInputStream());
				} else {
					fileUrl = dbFileMng.storeByExt(site.getLibraryPath(), ext,
							file.getInputStream());
					// 加上访问地址
					fileUrl = request.getContextPath() + dbFilePath + fileUrl;
				}
			} else if (site.getUploadFtp() != null) {
				Ftp ftp = site.getUploadFtp();
				String ftpUrl = ftp.getUrl();
				if (!StringUtils.isBlank(filename)
						&& FilenameUtils.getExtension(filename).equals(ext)) {
					filename = filename.substring(ftpUrl.length());
					fileUrl = ftp.storeByFilename(filename, file
							.getInputStream());
				} else {
					fileUrl = ftp.storeByExt(site.getLibraryPath(), ext, file
							.getInputStream());
					// 加上url前缀
					fileUrl = ftpUrl + fileUrl;
				}
			} else {
				String ctx = request.getContextPath();
				if (!StringUtils.isBlank(filename)
						&& FilenameUtils.getExtension(filename).equals(ext)) {
					filename = filename.substring(ctx.length());
					fileUrl = fileRepository.storeByFilename(filename, file);
				} else {
					fileUrl = fileRepository.storeByExt(site.getLibraryPath(),
							ext, file);
				}
				// 加上部署路径
				fileUrl = ctx + fileUrl;
			}
			cmsUserMng.updateUploadSize(user.getId(), Integer.parseInt(String.valueOf(file.getSize()/1024)));
			if(fileMng.findByPath(fileUrl)!=null){
				fileMng.saveFileByPath(fileUrl, origName, false);
			}
			model.addAttribute("docPath", fileUrl);
			model.addAttribute("docExt", ext);
		} catch (IllegalStateException e) {
			model.addAttribute("error", e.getMessage());
			log.error("upload file error!", e);
		} catch (IOException e) {
			model.addAttribute("error", e.getMessage());
			log.error("upload file error!", e);
		}
		return "development_partymembers/risenTargetDetail/wenku_iframe";
	}
	
	private WebErrors validateUpload(MultipartFile file,
			HttpServletRequest request) {
		String origName = file.getOriginalFilename();
		CmsUser user= CmsUtils.getUser(request);
		String ext = FilenameUtils.getExtension(origName).toLowerCase(Locale.ENGLISH);
		int fileSize = (int) (file.getSize() / 1024);
		WebErrors errors = WebErrors.create(request);
		if (errors.ifNull(file, "file")) {
			return errors;
		}
		if(origName!=null&&(origName.contains("/")||origName.contains("\\")||origName.indexOf("\0")!=-1)){
			errors.addErrorCode("upload.error.filename", origName);
		}
		//非允许的后缀
		if(!user.isAllowSuffix(ext)){
			errors.addErrorCode("upload.error.invalidsuffix", ext);
			return errors;
		}
		//超过附件大小限制
		if(!user.isAllowMaxFile((int)(file.getSize()/1024))){
			errors.addErrorCode("upload.error.toolarge",origName,user.getGroup().getAllowMaxFile());
			return errors;
		}
		//超过每日上传限制
		if (!user.isAllowPerDay(fileSize)) {
			long laveSize=user.getGroup().getAllowPerDay()-user.getUploadSize();
			if(laveSize<0){
				laveSize=0;
			}
			errors.addErrorCode("upload.error.dailylimit", laveSize);
		}
		return errors;
	}
	
	@RequiresPermissions("risenTargetDetail:v_report")
	@RequestMapping("/risenTargetDetail/v_report.do")
	public String report(Integer pageNo, HttpServletRequest request, ModelMap model) {
		try {
		Pagination pagination = manager.findByOrgId(cpn(pageNo), CookieUtils.getPageSize(request),null);
		model.addAttribute("pagination",pagination);
		model.addAttribute("pageNo",pagination.getPageNo());
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return "development_partymembers/risenTargetDetail/list";
	}
	/*
	@RequiresPermissions("risenTargetDetail:v_edit")
	@RequestMapping("/risenTargetDetail/v_edit.do")
	public String showInfo(HttpServletRequest request){
		//CmsUser user = CmsUtils.getUser(request);
		//Integer deptId = user.getDepartment().getId();
		//Integer parentId = new Integer(request.getr);
		return "development_partymembers/risenTargetDetail/showInfo";
	}
	*/
	@RequiresPermissions("risenTargetDetail:showNext")
	@RequestMapping("/risenTargetDetail/showNext.do")
	public String showNext(Integer pageNo, HttpServletRequest request, ModelMap model) {
		String parentId = request.getParameter("parentId");//cpn(pageNo)
		Pagination pagination = manager.getAllSub(cpn(pageNo), CookieUtils.getPageSize(request),parentId);
		model.addAttribute("pagination",pagination);
		model.addAttribute("pageNo",pagination.getPageNo());
		model.addAttribute("ParentId",parentId);
		return "development_partymembers/risenTargetDetail/showAllSub";
	}
	@RequiresPermissions("risenTargetDetail:v_edit")
	@RequestMapping("/risenTargetDetail/v_edit.do")
	public String edit(Integer id, Integer pageNo, HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		
		model.addAttribute("risenTargetDetail", manager.findById(id));
		model.addAttribute("pageNo",pageNo);
		return "development_partymembers/risenTargetDetail/edit";
	}
	@RequiresPermissions("risenTargetDetail:o_update")
	@RequestMapping("/risenTargetDetail/o_update.do")
	public String update(RisenTargetDetail bean, Integer pageNo, HttpServletRequest request,
			ModelMap model) {
		WebErrors errors = validateUpdate(bean.getId(), request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		CmsUser user= CmsUtils.getUser(request);
		bean.setRisentgdCuserid(String.valueOf(user.getDepartment().getId()));
		bean.setRisentgdCusername(user.getDepartment().getName());
		
		if(!StringUtils.isEmpty(bean.getRisentgdFile())){
			RisenTarget target = targetService.findById(bean.getRisentgdPid());
			int totalscore = target.getRisentgTotalScore().intValue();
			int percent = target.getRisentgNumPercent().intValue();
			int score = totalscore*percent/100;
			bean.setRisentgdNumscore(new Integer(score));
			bean.setRisentgdStatus("9");
			target.setRisentgStatus("9");
			targetService.save(target);
		}else{
			bean.setRisentgdStatus("1");
			RisenTarget target = targetService.findById(bean.getRisentgdPid());
			target.setRisentgStatus("9");
			targetService.save(target);
		}
		bean = manager.update(bean);
		log.info("update RisenTargetDetail id={}.", bean.getId());
		if(bean.getRisentgdQualityscore()!=null){
			return showNext(pageNo, request, model);
		}else{
			return list(pageNo, request, model);
		}
	}
	private WebErrors validateSave(RisenTarget bean, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		CmsSite site = CmsUtils.getSite(request);
//		bean.setSite(site);
		return errors;
	}
	
	private WebErrors validateEdit(Integer id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		CmsSite site = CmsUtils.getSite(request);
		if (vldExist(id, site.getId(), errors)) {
			return errors;
		}
		return errors;
	}

	private WebErrors validateUpdate(Integer id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		CmsSite site = CmsUtils.getSite(request);
		if (vldExist(id, site.getId(), errors)) {
			return errors;
		}
		return errors;
	}

	private WebErrors validateDelete(Integer[] ids, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		CmsSite site = CmsUtils.getSite(request);
		if (errors.ifEmpty(ids, "ids")) {
			return errors;
		}
		for (Integer id : ids) {
			vldExist(id, site.getId(), errors);
		}
		return errors;
	}

	private boolean vldExist(Integer id, Integer siteId, WebErrors errors) {
		 
		return false;
	}
	@Autowired
	private IRisenTargetDetailService manager;
	@Autowired
	private DbFileMng dbFileMng;
	@Autowired
	private FileRepository fileRepository;
	@Autowired
	private CmsUserMng cmsUserMng;
	@Autowired
	private CmsFileMng fileMng;
	@Autowired
	private IRisenTargetService targetService;
	@Autowired
	private CmsDepartmentMng departmentService;
}
