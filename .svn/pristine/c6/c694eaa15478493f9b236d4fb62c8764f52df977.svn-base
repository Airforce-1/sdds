package com.risen.action;

import static com.jeecms.common.page.SimplePage.cpn;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;

import com.risen.entity.RisenTarget;
import com.jeecms.core.entity.CmsDepartment;
import com.jeecms.core.entity.CmsSite;
import com.jeecms.core.entity.CmsUser;
import com.jeecms.core.manager.CmsDepartmentMng;
import com.risen.service.IRisenTargetService;
import com.jeecms.core.web.util.CmsUtils;
import com.jeecms.core.web.WebErrors;
import com.jeecms.common.page.Pagination;
import com.jeecms.common.web.CookieUtils;

@Controller
public class RisenTargetAct {
	private static final Logger log = LoggerFactory.getLogger(RisenTargetAct.class);

	@RequiresPermissions("risenTarget:v_list")
	@RequestMapping("/risenTarget/v_list.do")
	public String list(Integer pageNo, HttpServletRequest request, ModelMap model) {
		try {
		String startTime = request.getParameter("startTime");
		String endTime = request.getParameter("endTime");
		System.out.println(startTime);
		System.out.println(endTime+"1111");
		Pagination pagination = manager.getPage(cpn(pageNo), CookieUtils.getPageSize(request),startTime,endTime);
		model.addAttribute("pagination",pagination);
		model.addAttribute("pageNo",pagination.getPageNo());
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return "development_partymembers/risenTarget/list";
	}

	@RequiresPermissions("risenTarget:v_add")
	@RequestMapping("/risenTarget/v_add.do")
	public String add(ModelMap model) {
		return "development_partymembers/risenTarget/add";
	}

	@RequiresPermissions("risenTarget:v_edit")
	@RequestMapping("/risenTarget/v_edit.do")
	public String edit(Integer id, Integer pageNo, HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateEdit(id, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		model.addAttribute("risenTarget", manager.findById(id));
		model.addAttribute("pageNo",pageNo);
		return "development_partymembers/risenTarget/edit";
	}

	@RequiresPermissions("risenTarget:o_save")
	@RequestMapping("/risenTarget/o_save.do")
	public String save(RisenTarget bean, HttpServletRequest request, ModelMap model) {
		WebErrors errors = validateSave(bean, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		CmsUser user = CmsUtils.getUser(request);
		Integer parentId = user.getDepartment().getId();
		bean.setRisentgCuserId(String.valueOf(parentId));
		bean.setRisentgCuserName(user.getDepartment().getName());
		bean.setRisentgCdate(new Date());
		//bean = manager.save(bean);
		String addWay = request.getParameter("addWay");
		if(!StringUtils.hasText(addWay)){
			addWay="all";
		}
		if(StringUtils.hasText(addWay)){
			String deptId = "",deptname="";
			if(addWay.equals("all")){
				List<CmsDepartment> depts = dept.getList(parentId, false);
				for (CmsDepartment cmsDepartment : depts) {
					deptId = deptId + cmsDepartment.getId()+","; 
					deptname = deptname + cmsDepartment.getName()+","; 
				}
				deptId = deptId.substring(0,deptId.length()-1);
				deptname = deptname.substring(0,deptname.length()-1);
			}else if(addWay.equals("all")){
				deptId = request.getParameter("deptId");
				deptname = request.getParameter("deptname");
			}
			bean.setRisentgCorgId(deptId);
			bean.setRisentgCorgName(deptname);
		}
		log.info("save RisenTarget id={}", bean.getId());
		return "redirect:v_list.do";
	}

	@RequiresPermissions("risenTarget:o_update")
	@RequestMapping("/risenTarget/o_update.do")
	public String update(RisenTarget bean, Integer pageNo, HttpServletRequest request,
			ModelMap model) {
		WebErrors errors = validateUpdate(bean.getId(), request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		//bean = manager.update(bean);
		log.info("update RisenTarget id={}.", bean.getId());
		return list(pageNo, request, model);
	}

	@RequiresPermissions("risenTarget:o_delete")
	@RequestMapping("/risenTarget/o_delete.do")
	public String delete(Integer[] ids, Integer pageNo, HttpServletRequest request,
			ModelMap model) {
		WebErrors errors = validateDelete(ids, request);
		if (errors.hasErrors()) {
			return errors.showErrorPage(model);
		}
		//RisenTarget[] beans = manager.deleteByIds(ids);
		/*for (RisenTarget bean : beans) {
			log.info("delete RisenTarget id={}", bean.getId());
		}*/
		return list(pageNo, request, model);
	}

	private WebErrors validateSave(RisenTarget bean, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		CmsSite site = CmsUtils.getSite(request);
//		bean.setSite(site);
		return errors;
	}
	
	private WebErrors validateEdit(Integer id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		CmsSite site = CmsUtils.getSite(request);
		if (vldExist(id, site.getId(), errors)) {
			return errors;
		}
		return errors;
	}

	private WebErrors validateUpdate(Integer id, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		CmsSite site = CmsUtils.getSite(request);
		if (vldExist(id, site.getId(), errors)) {
			return errors;
		}
		return errors;
	}

	private WebErrors validateDelete(Integer[] ids, HttpServletRequest request) {
		WebErrors errors = WebErrors.create(request);
		CmsSite site = CmsUtils.getSite(request);
		if (errors.ifEmpty(ids, "ids")) {
			return errors;
		}
		for (Integer id : ids) {
			vldExist(id, site.getId(), errors);
		}
		return errors;
	}

	private boolean vldExist(Integer id, Integer siteId, WebErrors errors) {
		 
		return false;
	}
	
	@Autowired
	private IRisenTargetService manager;
	@Autowired
	private CmsDepartmentMng dept;
}